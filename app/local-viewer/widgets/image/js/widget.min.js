(function(){function e(e){function n(n,t,r,i,o,s){for(;o>=0&&s>o;o+=e){var a=i?i[o]:o;r=t(r,n[a],a,n)}return r}return function(t,r,i,o){r=R(r,o,4);var s=!C(t)&&y.keys(t),a=(s||t).length,u=e>0?0:a-1;return arguments.length<3&&(i=t[s?s[u]:u],u+=e),n(t,r,i,s,u,a)}}function n(e){return function(n,t,r){t=b(t,r);for(var i=V(n),o=e>0?0:i-1;o>=0&&i>o;o+=e)if(t(n[o],o,n))return o;return-1}}function t(e,n,t){return function(r,i,o){var s=0,a=V(r);if("number"==typeof o)e>0?s=o>=0?o:Math.max(o+a,s):a=o>=0?Math.min(o+1,a):o+a+1;else if(t&&o&&a)return o=t(r,i),r[o]===i?o:-1;if(i!==i)return o=n(c.call(r,s,a),y.isNaN),o>=0?o+s:-1;for(o=e>0?s:a-1;o>=0&&a>o;o+=e)if(r[o]===i)return o;return-1}}function r(e,n){var t=L.length,r=e.constructor,i=y.isFunction(r)&&r.prototype||a,o="constructor";for(y.has(e,o)&&!y.contains(n,o)&&n.push(o);t--;)o=L[t],o in e&&e[o]!==i[o]&&!y.contains(n,o)&&n.push(o)}var i=this,o=i._,s=Array.prototype,a=Object.prototype,u=Function.prototype,l=s.push,c=s.slice,f=a.toString,d=a.hasOwnProperty,g=Array.isArray,m=Object.keys,p=u.bind,v=Object.create,h=function(){},y=function(e){return e instanceof y?e:this instanceof y?(this._wrapped=e,void 0):new y(e)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=y),exports._=y):i._=y,y.VERSION="1.8.3";var R=function(e,n,t){if(void 0===n)return e;switch(null==t?3:t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,i){return e.call(n,t,r,i)};case 4:return function(t,r,i,o){return e.call(n,t,r,i,o)}}return function(){return e.apply(n,arguments)}},b=function(e,n,t){return null==e?y.identity:y.isFunction(e)?R(e,n,t):y.isObject(e)?y.matcher(e):y.property(e)};y.iteratee=function(e,n){return b(e,n,1/0)};var E=function(e,n){return function(t){var r=arguments.length;if(2>r||null==t)return t;for(var i=1;r>i;i++)for(var o=arguments[i],s=e(o),a=s.length,u=0;a>u;u++){var l=s[u];n&&void 0!==t[l]||(t[l]=o[l])}return t}},I=function(e){if(!y.isObject(e))return{};if(v)return v(e);h.prototype=e;var n=new h;return h.prototype=null,n},w=function(e){return function(n){return null==n?void 0:n[e]}},_=Math.pow(2,53)-1,V=w("length"),C=function(e){var n=V(e);return"number"==typeof n&&n>=0&&_>=n};y.each=y.forEach=function(e,n,t){n=R(n,t);var r,i;if(C(e))for(r=0,i=e.length;i>r;r++)n(e[r],r,e);else{var o=y.keys(e);for(r=0,i=o.length;i>r;r++)n(e[o[r]],o[r],e)}return e},y.map=y.collect=function(e,n,t){n=b(n,t);for(var r=!C(e)&&y.keys(e),i=(r||e).length,o=Array(i),s=0;i>s;s++){var a=r?r[s]:s;o[s]=n(e[a],a,e)}return o},y.reduce=y.foldl=y.inject=e(1),y.reduceRight=y.foldr=e(-1),y.find=y.detect=function(e,n,t){var r;return r=C(e)?y.findIndex(e,n,t):y.findKey(e,n,t),void 0!==r&&-1!==r?e[r]:void 0},y.filter=y.select=function(e,n,t){var r=[];return n=b(n,t),y.each(e,function(e,t,i){n(e,t,i)&&r.push(e)}),r},y.reject=function(e,n,t){return y.filter(e,y.negate(b(n)),t)},y.every=y.all=function(e,n,t){n=b(n,t);for(var r=!C(e)&&y.keys(e),i=(r||e).length,o=0;i>o;o++){var s=r?r[o]:o;if(!n(e[s],s,e))return!1}return!0},y.some=y.any=function(e,n,t){n=b(n,t);for(var r=!C(e)&&y.keys(e),i=(r||e).length,o=0;i>o;o++){var s=r?r[o]:o;if(n(e[s],s,e))return!0}return!1},y.contains=y.includes=y.include=function(e,n,t,r){return C(e)||(e=y.values(e)),("number"!=typeof t||r)&&(t=0),y.indexOf(e,n,t)>=0},y.invoke=function(e,n){var t=c.call(arguments,2),r=y.isFunction(n);return y.map(e,function(e){var i=r?n:e[n];return null==i?i:i.apply(e,t)})},y.pluck=function(e,n){return y.map(e,y.property(n))},y.where=function(e,n){return y.filter(e,y.matcher(n))},y.findWhere=function(e,n){return y.find(e,y.matcher(n))},y.max=function(e,n,t){var r,i,o=-1/0,s=-1/0;if(null==n&&null!=e){e=C(e)?e:y.values(e);for(var a=0,u=e.length;u>a;a++)r=e[a],r>o&&(o=r)}else n=b(n,t),y.each(e,function(e,t,r){i=n(e,t,r),(i>s||i===-1/0&&o===-1/0)&&(o=e,s=i)});return o},y.min=function(e,n,t){var r,i,o=1/0,s=1/0;if(null==n&&null!=e){e=C(e)?e:y.values(e);for(var a=0,u=e.length;u>a;a++)r=e[a],o>r&&(o=r)}else n=b(n,t),y.each(e,function(e,t,r){i=n(e,t,r),(s>i||1/0===i&&1/0===o)&&(o=e,s=i)});return o},y.shuffle=function(e){for(var n,t=C(e)?e:y.values(e),r=t.length,i=Array(r),o=0;r>o;o++)n=y.random(0,o),n!==o&&(i[o]=i[n]),i[n]=t[o];return i},y.sample=function(e,n,t){return null==n||t?(C(e)||(e=y.values(e)),e[y.random(e.length-1)]):y.shuffle(e).slice(0,Math.max(0,n))},y.sortBy=function(e,n,t){return n=b(n,t),y.pluck(y.map(e,function(e,t,r){return{value:e,index:t,criteria:n(e,t,r)}}).sort(function(e,n){var t=e.criteria,r=n.criteria;if(t!==r){if(t>r||void 0===t)return 1;if(r>t||void 0===r)return-1}return e.index-n.index}),"value")};var S=function(e){return function(n,t,r){var i={};return t=b(t,r),y.each(n,function(r,o){var s=t(r,o,n);e(i,r,s)}),i}};y.groupBy=S(function(e,n,t){y.has(e,t)?e[t].push(n):e[t]=[n]}),y.indexBy=S(function(e,n,t){e[t]=n}),y.countBy=S(function(e,n,t){y.has(e,t)?e[t]++:e[t]=1}),y.toArray=function(e){return e?y.isArray(e)?c.call(e):C(e)?y.map(e,y.identity):y.values(e):[]},y.size=function(e){return null==e?0:C(e)?e.length:y.keys(e).length},y.partition=function(e,n,t){n=b(n,t);var r=[],i=[];return y.each(e,function(e,t,o){(n(e,t,o)?r:i).push(e)}),[r,i]},y.first=y.head=y.take=function(e,n,t){return null==e?void 0:null==n||t?e[0]:y.initial(e,e.length-n)},y.initial=function(e,n,t){return c.call(e,0,Math.max(0,e.length-(null==n||t?1:n)))},y.last=function(e,n,t){return null==e?void 0:null==n||t?e[e.length-1]:y.rest(e,Math.max(0,e.length-n))},y.rest=y.tail=y.drop=function(e,n,t){return c.call(e,null==n||t?1:n)},y.compact=function(e){return y.filter(e,y.identity)};var T=function(e,n,t,r){for(var i=[],o=0,s=r||0,a=V(e);a>s;s++){var u=e[s];if(C(u)&&(y.isArray(u)||y.isArguments(u))){n||(u=T(u,n,t));var l=0,c=u.length;for(i.length+=c;c>l;)i[o++]=u[l++]}else t||(i[o++]=u)}return i};y.flatten=function(e,n){return T(e,n,!1)},y.without=function(e){return y.difference(e,c.call(arguments,1))},y.uniq=y.unique=function(e,n,t,r){y.isBoolean(n)||(r=t,t=n,n=!1),null!=t&&(t=b(t,r));for(var i=[],o=[],s=0,a=V(e);a>s;s++){var u=e[s],l=t?t(u,s,e):u;n?(s&&o===l||i.push(u),o=l):t?y.contains(o,l)||(o.push(l),i.push(u)):y.contains(i,u)||i.push(u)}return i},y.union=function(){return y.uniq(T(arguments,!0,!0))},y.intersection=function(e){for(var n=[],t=arguments.length,r=0,i=V(e);i>r;r++){var o=e[r];if(!y.contains(n,o)){for(var s=1;t>s&&y.contains(arguments[s],o);s++);s===t&&n.push(o)}}return n},y.difference=function(e){var n=T(arguments,!0,!0,1);return y.filter(e,function(e){return!y.contains(n,e)})},y.zip=function(){return y.unzip(arguments)},y.unzip=function(e){for(var n=e&&y.max(e,V).length||0,t=Array(n),r=0;n>r;r++)t[r]=y.pluck(e,r);return t},y.object=function(e,n){for(var t={},r=0,i=V(e);i>r;r++)n?t[e[r]]=n[r]:t[e[r][0]]=e[r][1];return t},y.findIndex=n(1),y.findLastIndex=n(-1),y.sortedIndex=function(e,n,t,r){t=b(t,r,1);for(var i=t(n),o=0,s=V(e);s>o;){var a=Math.floor((o+s)/2);t(e[a])<i?o=a+1:s=a}return o},y.indexOf=t(1,y.findIndex,y.sortedIndex),y.lastIndexOf=t(-1,y.findLastIndex),y.range=function(e,n,t){null==n&&(n=e||0,e=0),t=t||1;for(var r=Math.max(Math.ceil((n-e)/t),0),i=Array(r),o=0;r>o;o++,e+=t)i[o]=e;return i};var O=function(e,n,t,r,i){if(!(r instanceof n))return e.apply(t,i);var o=I(e.prototype),s=e.apply(o,i);return y.isObject(s)?s:o};y.bind=function(e,n){if(p&&e.bind===p)return p.apply(e,c.call(arguments,1));if(!y.isFunction(e))throw new TypeError("Bind must be called on a function");var t=c.call(arguments,2),r=function(){return O(e,r,n,this,t.concat(c.call(arguments)))};return r},y.partial=function(e){var n=c.call(arguments,1),t=function(){for(var r=0,i=n.length,o=Array(i),s=0;i>s;s++)o[s]=n[s]===y?arguments[r++]:n[s];for(;r<arguments.length;)o.push(arguments[r++]);return O(e,t,this,this,o)};return t},y.bindAll=function(e){var n,t,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(n=1;r>n;n++)t=arguments[n],e[t]=y.bind(e[t],e);return e},y.memoize=function(e,n){var t=function(r){var i=t.cache,o=""+(n?n.apply(this,arguments):r);return y.has(i,o)||(i[o]=e.apply(this,arguments)),i[o]};return t.cache={},t},y.delay=function(e,n){var t=c.call(arguments,2);return setTimeout(function(){return e.apply(null,t)},n)},y.defer=y.partial(y.delay,y,1),y.throttle=function(e,n,t){var r,i,o,s=null,a=0;t||(t={});var u=function(){a=t.leading===!1?0:y.now(),s=null,o=e.apply(r,i),s||(r=i=null)};return function(){var l=y.now();a||t.leading!==!1||(a=l);var c=n-(l-a);return r=this,i=arguments,0>=c||c>n?(s&&(clearTimeout(s),s=null),a=l,o=e.apply(r,i),s||(r=i=null)):s||t.trailing===!1||(s=setTimeout(u,c)),o}},y.debounce=function(e,n,t){var r,i,o,s,a,u=function(){var l=y.now()-s;n>l&&l>=0?r=setTimeout(u,n-l):(r=null,t||(a=e.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,s=y.now();var l=t&&!r;return r||(r=setTimeout(u,n)),l&&(a=e.apply(o,i),o=i=null),a}},y.wrap=function(e,n){return y.partial(n,e)},y.negate=function(e){return function(){return!e.apply(this,arguments)}},y.compose=function(){var e=arguments,n=e.length-1;return function(){for(var t=n,r=e[n].apply(this,arguments);t--;)r=e[t].call(this,r);return r}},y.after=function(e,n){return function(){return--e<1?n.apply(this,arguments):void 0}},y.before=function(e,n){var t;return function(){return--e>0&&(t=n.apply(this,arguments)),1>=e&&(n=null),t}},y.once=y.partial(y.before,2);var A=!{toString:null}.propertyIsEnumerable("toString"),L=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];y.keys=function(e){if(!y.isObject(e))return[];if(m)return m(e);var n=[];for(var t in e)y.has(e,t)&&n.push(t);return A&&r(e,n),n},y.allKeys=function(e){if(!y.isObject(e))return[];var n=[];for(var t in e)n.push(t);return A&&r(e,n),n},y.values=function(e){for(var n=y.keys(e),t=n.length,r=Array(t),i=0;t>i;i++)r[i]=e[n[i]];return r},y.mapObject=function(e,n,t){n=b(n,t);for(var r,i=y.keys(e),o=i.length,s={},a=0;o>a;a++)r=i[a],s[r]=n(e[r],r,e);return s},y.pairs=function(e){for(var n=y.keys(e),t=n.length,r=Array(t),i=0;t>i;i++)r[i]=[n[i],e[n[i]]];return r},y.invert=function(e){for(var n={},t=y.keys(e),r=0,i=t.length;i>r;r++)n[e[t[r]]]=t[r];return n},y.functions=y.methods=function(e){var n=[];for(var t in e)y.isFunction(e[t])&&n.push(t);return n.sort()},y.extend=E(y.allKeys),y.extendOwn=y.assign=E(y.keys),y.findKey=function(e,n,t){n=b(n,t);for(var r,i=y.keys(e),o=0,s=i.length;s>o;o++)if(r=i[o],n(e[r],r,e))return r},y.pick=function(e,n,t){var r,i,o={},s=e;if(null==s)return o;y.isFunction(n)?(i=y.allKeys(s),r=R(n,t)):(i=T(arguments,!1,!1,1),r=function(e,n,t){return n in t},s=Object(s));for(var a=0,u=i.length;u>a;a++){var l=i[a],c=s[l];r(c,l,s)&&(o[l]=c)}return o},y.omit=function(e,n,t){if(y.isFunction(n))n=y.negate(n);else{var r=y.map(T(arguments,!1,!1,1),String);n=function(e,n){return!y.contains(r,n)}}return y.pick(e,n,t)},y.defaults=E(y.allKeys,!0),y.create=function(e,n){var t=I(e);return n&&y.extendOwn(t,n),t},y.clone=function(e){return y.isObject(e)?y.isArray(e)?e.slice():y.extend({},e):e},y.tap=function(e,n){return n(e),e},y.isMatch=function(e,n){var t=y.keys(n),r=t.length;if(null==e)return!r;for(var i=Object(e),o=0;r>o;o++){var s=t[o];if(n[s]!==i[s]||!(s in i))return!1}return!0};var x=function(e,n,t,r){if(e===n)return 0!==e||1/e===1/n;if(null==e||null==n)return e===n;e instanceof y&&(e=e._wrapped),n instanceof y&&(n=n._wrapped);var i=f.call(e);if(i!==f.call(n))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+n;case"[object Number]":return+e!==+e?+n!==+n:0===+e?1/+e===1/n:+e===+n;case"[object Date]":case"[object Boolean]":return+e===+n}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof n)return!1;var s=e.constructor,a=n.constructor;if(s!==a&&!(y.isFunction(s)&&s instanceof s&&y.isFunction(a)&&a instanceof a)&&"constructor"in e&&"constructor"in n)return!1}t=t||[],r=r||[];for(var u=t.length;u--;)if(t[u]===e)return r[u]===n;if(t.push(e),r.push(n),o){if(u=e.length,u!==n.length)return!1;for(;u--;)if(!x(e[u],n[u],t,r))return!1}else{var l,c=y.keys(e);if(u=c.length,y.keys(n).length!==u)return!1;for(;u--;)if(l=c[u],!y.has(n,l)||!x(e[l],n[l],t,r))return!1}return t.pop(),r.pop(),!0};y.isEqual=function(e,n){return x(e,n)},y.isEmpty=function(e){return null==e?!0:C(e)&&(y.isArray(e)||y.isString(e)||y.isArguments(e))?0===e.length:0===y.keys(e).length},y.isElement=function(e){return!(!e||1!==e.nodeType)},y.isArray=g||function(e){return"[object Array]"===f.call(e)},y.isObject=function(e){var n=typeof e;return"function"===n||"object"===n&&!!e},y.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){y["is"+e]=function(n){return f.call(n)==="[object "+e+"]"}}),y.isArguments(arguments)||(y.isArguments=function(e){return y.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(y.isFunction=function(e){return"function"==typeof e||!1}),y.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},y.isNaN=function(e){return y.isNumber(e)&&e!==+e},y.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"===f.call(e)},y.isNull=function(e){return null===e},y.isUndefined=function(e){return void 0===e},y.has=function(e,n){return null!=e&&d.call(e,n)},y.noConflict=function(){return i._=o,this},y.identity=function(e){return e},y.constant=function(e){return function(){return e}},y.noop=function(){},y.property=w,y.propertyOf=function(e){return null==e?function(){}:function(n){return e[n]}},y.matcher=y.matches=function(e){return e=y.extendOwn({},e),function(n){return y.isMatch(n,e)}},y.times=function(e,n,t){var r=Array(Math.max(0,e));n=R(n,t,1);for(var i=0;e>i;i++)r[i]=n(i);return r},y.random=function(e,n){return null==n&&(n=e,e=0),e+Math.floor(Math.random()*(n-e+1))},y.now=Date.now||function(){return(new Date).getTime()};var k={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},F=y.invert(k),N=function(e){var n=function(n){return e[n]},t="(?:"+y.keys(e).join("|")+")",r=RegExp(t),i=RegExp(t,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(i,n):e}};y.escape=N(k),y.unescape=N(F),y.result=function(e,n,t){var r=null==e?void 0:e[n];return void 0===r&&(r=t),y.isFunction(r)?r.call(e):r};var M=0;y.uniqueId=function(e){var n=++M+"";return e?e+n:n},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var j=/(.)^/,P={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},q=/\\|'|\r|\n|\u2028|\u2029/g,D=function(e){return"\\"+P[e]};y.template=function(e,n,t){!n&&t&&(n=t),n=y.defaults({},n,y.templateSettings);var r=RegExp([(n.escape||j).source,(n.interpolate||j).source,(n.evaluate||j).source].join("|")+"|$","g"),i=0,o="__p+='";e.replace(r,function(n,t,r,s,a){return o+=e.slice(i,a).replace(q,D),i=a+n.length,t?o+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),n}),o+="';\n",n.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(n.variable||"obj","_",o)}catch(a){throw a.source=o,a}var u=function(e){return s.call(this,e,y)},l=n.variable||"obj";return u.source="function("+l+"){\n"+o+"}",u},y.chain=function(e){var n=y(e);return n._chain=!0,n};var U=function(e,n){return e._chain?y(n).chain():n};y.mixin=function(e){y.each(y.functions(e),function(n){var t=y[n]=e[n];y.prototype[n]=function(){var e=[this._wrapped];return l.apply(e,arguments),U(this,t.apply(y,e))}})},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var n=s[e];y.prototype[e]=function(){var t=this._wrapped;return n.apply(t,arguments),"shift"!==e&&"splice"!==e||0!==t.length||delete t[0],U(this,t)}}),y.each(["concat","join","slice"],function(e){var n=s[e];y.prototype[e]=function(){return U(this,n.apply(this._wrapped,arguments))}}),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return y})}).call(this);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,n){var r=null;e.event?(r=e,r.file_url&&(r.file_format=t(r.file_url)),r.company_id=l,r.display_id=u,c&&(r.version=c),n(r)):n(r)}function n(){var e=new Date,n=e.getUTCFullYear(),t=e.getUTCMonth()+1,r=e.getUTCDate();return 10>t&&(t="0"+t),10>r&&(r="0"+r),""+n+t+r}function t(e){var n,t=/[?#&]/;return e&&"string"==typeof e?(n=e.substr(e.lastIndexOf(".")+1),t.test(n)&&(n=n.substr(0,-1!==n.indexOf("?")?n.indexOf("?"):n.length),n=n.substr(0,-1!==n.indexOf("#")?n.indexOf("#"):n.length),n=n.substr(0,-1!==n.indexOf("&")?n.indexOf("&"):n.length)),n.toLowerCase()):null}function r(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:n(),rows:[{insertId:""}]},r=JSON.parse(JSON.stringify(t));return r.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),r.rows[0].json=JSON.parse(JSON.stringify(e)),r.rows[0].json.ts=(new Date).toISOString(),r}function i(n,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(n,e)})}function o(e,t){try{top.postToPlayer({message:"widget-log",table:e,params:JSON.stringify(t),suffix:n()})}catch(r){console.log("widget-common.logEventToPlayer",r)}}function s(e,n){l=e,u=n}function a(e){c=e}var u="",l="",c=null;return{getInsertData:r,getFileFormat:t,logEvent:i,logEventToPlayer:o,setIds:s,setVersion:a}}(),RiseVision.Common.Logger=function(e){"use strict";function n(e){var n=new XMLHttpRequest;return new Date-l<358e4?e({}):(n.open("POST",i,!0),n.onloadend=function(){var t={};try{t=JSON.parse(n.response)}catch(r){console.warn("Can't refresh logger token - ",r.message)}e({token:t.access_token,refreshedAt:new Date})},n.send(),void 0)}function t(e){return s&&u===e}function r(r,i){function f(n){var t,s,a=new XMLHttpRequest;s=o.replace("TABLE_ID",r),l=n.refreshedAt||l,c=n.token||c,t=e.getInsertData(i),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),i.cb&&"function"==typeof i.cb&&(a.onloadend=function(){i.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!r||!i||i.hasOwnProperty("event")&&!i.event||i.hasOwnProperty("event")&&t(i.event))&&i.display_id&&"preview"!==i.display_id&&"display_id"!==i.display_id&&"displayId"!==i.display_id){try{if(top.postToPlayer&&top.enableWidgetLogging)return e.logEventToPlayer(r,i)}catch(d){console.log("widget-common: logger",d)}return s=!0,u=i.event,setTimeout(function(){s=!1},a),n(f)}}var i="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",o="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,u="",l=0,c="";return{log:r}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,n){var t="font-family: "+decodeURIComponent(n.font.family).replace(/'/g,"")+"; ",r="color: "+(n.color?n.color:n.forecolor)+"; ",i="font-size: "+(-1===n.size.indexOf("px")?n.size+"px; ":n.size+"; "),o="font-weight: "+(n.bold?"bold":"normal")+"; ",s="font-style: "+(n.italic?"italic":"normal")+"; ",a="text-decoration: "+(n.underline?"underline":"none")+"; ",u="background-color: "+(n.highlightColor?n.highlightColor:n.backcolor)+";";return"."+e+" {"+t+r+i+o+s+a+u+"}"}function n(e){for(var n=document.createElement("style"),t=0,r=e.length;r>t;t++)n.appendChild(document.createTextNode(e[t]));document.head.appendChild(n)}function t(t,o){function s(){o&&"function"==typeof o&&o()}function a(){s()}var u=null,l=[],c=[],f=[];if(!t||0===t.length)return s(),void 0;t.forEach(function(t){t.class&&t.fontStyle&&n([e(t.class,t.fontStyle)])});for(var d=0;d<t.length;d++)t[d].fontStyle&&t[d].fontStyle.font.type&&"google"===t[d].fontStyle.font.type&&(u=t[d].fontStyle.font.family.split(",")[0],u=u.replace(/'/g,""),l.push(u));for(d=0;d<t.length;d++)t[d].fontStyle&&t[d].fontStyle.font.type&&"custom"===t[d].fontStyle.font.type&&(c.push(decodeURIComponent(t[d].fontStyle.font.family).replace(/'/g,"")),f.push(t[d].fontStyle.font.url.replace(/'/g,"\\'")));if(0===l.length&&0===c.length)s();else{for(var g=0;g<c.length;g+=1)r(c[g],f[g]);l.length>0?i(l,a):s()}}function r(e,n,t){var r=null,i="font-family: "+e+"; src: url('"+n+"');";t=t||document,r=t.styleSheets[0],null!==r&&r.addRule("@font-face",i)}function i(e,n){WebFont.load({google:{families:e},active:function(){n&&"function"==typeof n&&n()},inactive:function(){n&&"function"==typeof n&&n()},timeout:5e3})}function o(e){var n=document.createElement("script");n.src=e,document.body.appendChild(n)}function s(e){for(var n=e.length,t=[],r=0;n>r;r++)t[r]=new Image,t[r].src=e[r]}function a(e){return u(e,window.location.search.substring(1))}function u(e,n){for(var t,r=n.split("&"),i=0;i<r.length;i++)if(t=r[i].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}function l(e){var n=/(\d{4})\.(\d{2})\.(\d{2})\.(\d{2})\.(\d{2})/,t=n.exec(e);return t?new Date(+t[1],+t[2]-1,+t[3],+t[4],+t[5]):void 0}function c(e){var n="";switch(e){case 404:n="The file does not exist or cannot be accessed.";break;case 507:n="There is not enough disk space to save the file on Rise Cache.";break;default:n="There was a problem retrieving the file from Rise Cache."}return n}function f(e){var n=document.createElement("div");return n.innerHTML=e,n.textContent}function d(e,n){var t=new XMLHttpRequest;if(e&&n&&"function"==typeof n){t.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{t.send(),n(t.status>=200&&t.status<304)}catch(r){n(!1)}}}function g(){var e=25,n=navigator.userAgent.match(/Chrome\/(\S+)/),t=n?n[1]:0;return t&&(t=parseInt(t.substring(0,t.indexOf("."))),e>=t)?!0:!1}function m(e,n){return/^(?:f|ht)tps?\:\/\//.test(e)||(e=(n?"https://":"http://")+e),e}return{addProtocol:m,getQueryParameter:a,getQueryStringParameter:u,getFontCssStyle:e,addCSSRules:n,loadFonts:t,loadCustomFont:r,loadGoogleFonts:i,loadScript:o,preloadImages:s,getRiseCacheErrorMessage:c,unescapeHTML:f,hasInternetConnection:d,isLegacy:g,getDateObjectFromPlayerVersionString:l}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var n=new XMLHttpRequest,t=this;e&&"function"==typeof e&&(f?n.open("GET",u,!0):n.open("GET",u+"ping?callback=_",!0),n.onreadystatechange=function(){try{if(4===n.readyState)if(l=!0,200===n.status){c=!0;try{var r=n.responseText?JSON.parse(n.responseText):"";r&&(p=r.version)}catch(i){console.log(i)}e(!0,n.responseText)}else{if(404===n.status)return f=!0,u="https://localhost:9495/",t.ping(e);if(d)return f=!0,d=!1,u="http://localhost:9494/",t.ping(e);console.debug("Rise Cache is not running"),f=!1,c=!1,e(!1,null)}}catch(i){console.debug("Caught exception: ",i.description)}},n.send())}function n(e,n,t){function r(){var n,r,s;c?n=f?i(p,m)>0?u+"files?url="+e:u+"files?url="+encodeURIComponent(e):t?u+"?url="+encodeURIComponent(e):u+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?n=e:(r=e.split("?"),s=1===r.length?"?":"&",n=e+s+"cb="+(new Date).getTime()),o("HEAD",n)}function i(e,n){function t(e){return/^\d+$/.test(e)}function r(e){for(s=0;s<e.length;s++)if(!t(e[s]))return!1;return!0}var i=e.split("."),o=n.split("."),s=0;if(!r(i)||!r(o))return 0/0;for(s=0;s<i.length;++s){if(o.length===s)return 1;if(i[s]!==o[s])return i[s]>o[s]?1:-1}return i.length!==o.length?-1:0}function o(e,t){var r=new XMLHttpRequest,i={xhr:r,url:t};c?(r.open(e,t,!0),r.addEventListener("loadend",function(){var a=r.status||0;202===a?(s++,3>s?setTimeout(function(){o(e,t)},3e3):n(i,new Error("File is downloading"))):a>=200&&300>a?n(i):"HEAD"===e?o("GET",t):n(i,new Error("The request failed with status code: "+a))}),r.send()):n(i)}if(e&&n&&"function"==typeof n){var s=0;return l?r():this.ping(r)}}function t(e){var n="";switch(e){case 502:n="There was a problem retrieving the file.";break;case 504:n="Unable to download the file. The server is not responding.";break;case 507:n="There is not enough disk space to save the file on Rise Cache.";break;case 534:n="The file does not exist or cannot be accessed.";break;default:n=""}return n}function r(e){return e&&"function"==typeof e?l?(e(c),void 0):this.ping(function(){e(c)}):void 0}function i(e){return e&&"function"==typeof e?l?(e(f),void 0):this.ping(function(){e(f)}):void 0}function o(e){return e&&"function"==typeof e?this.isV2Running(function(n){n?e(n):e(s())}):void 0}function s(){var e=g.getDateObjectFromPlayerVersionString("2016.10.10.00.00"),n=g.getQueryParameter("sysInfo");if(!n){var t=g.getQueryParameter("parent");n=g.getQueryStringParameter("sysInfo",t)}if(n){var r=g.getQueryStringParameter("pv",n),i=g.getDateObjectFromPlayerVersionString(r);return i>=e}return!1}function a(){l=!1,c=!1,f=!1,d=!0,u="http://localhost:9494/"}var u="http://localhost:9494/",l=!1,c=!1,f=!1,d=!0,g=RiseVision.Common.Utilities,m="1.7.3",p="";return{getErrorMessage:t,getFile:n,isRiseCacheRunning:r,isV2Running:i,isRCV2Player:o,ping:e,reset:a}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.WSClient=function(){function e(e){i(e)}function n(){try{if(top.RiseVision.Viewer.LocalMessaging)return top.RiseVision.Viewer.LocalMessaging.canConnect()}catch(e){console.log("widget-common: ws-client",e)}}function t(){i({topic:"client-list-request"})}function r(e){if(e&&"function"==typeof e)try{top.RiseVision.Viewer.LocalMessaging&&top.RiseVision.Viewer.LocalMessaging.receiveMessages(e)}catch(n){console.log("widget-common: ws-client",n)}}function i(e){try{top.RiseVision.Viewer.LocalMessaging&&top.RiseVision.Viewer.LocalMessaging.write(e)}catch(n){console.log("widget-common: ws-client",n)}}return{broadcastMessage:e,canConnect:n,getModuleClientList:t,receiveMessages:r}}();var version="0.1.1",config={STORAGE_ENV:"prod",COMPONENTS_PATH:"components/"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function n(){e.rpc.call("","rsevent_ready",null,C.getString("id"),!0,!0,!0,!0,!0)}function t(){e.rpc.call("","rsevent_done",null,C.getString("id")),null!==F&&f(F,!0),f({event:"done",file_url:o()},!1)}function r(){clearTimeout(M),M=null}function i(){r(),M=setTimeout(function(){t()},5e3)}function o(){var e=-1;if(k&&k.length>0){if("file"===w)return k[0];if("folder"===w&&x&&x.isReady()&&(e=x.getCurrentSlide(),-1!==e))return k[e]?k[e].url:null}return null}function s(){V&&"preview"!==V&&"display_id"!==V&&-1===V.indexOf("displayId")&&(L=new RiseVision.Image.LocalStorageFile,L.init())}function a(){var e,t=document.getElementById("container"),r=document.createDocumentFragment(),i=document.createElement("div");S=new RiseVision.Image.Message(document.getElementById("container"),document.getElementById("messageContainer")),S.show("Please wait while your image is downloaded."),T.background&&Object.keys(T.background).length>0&&(document.body.style.background=T.background.color),"file"===w?(i=u(),r.appendChild(i),t.appendChild(r),H=new Image,e=0!==Object.keys(T.storage).length,e?(N="storage file",O=new RiseVision.Image.StorageFile(T,V),O.init()):(N="custom",A=new RiseVision.Image.NonStorage(T),A.init())):"folder"===w&&(i.className="tp-banner-container",r.appendChild(i),t.appendChild(r),N="storage folder",O=new RiseVision.Image.StorageFolder(T,V),O.init()),s(),n()}function u(){var e=document.createElement("div");return e.setAttribute("id","image"),e.className=T.position,e.className=T.scaleToFit?e.className+" scale-to-fit":e.className,e}function l(e){H.onload=function(){var n=document.querySelector("#container #image");n.style.backgroundImage="none",n.style.backgroundImage="url('"+e+"')",G=-1===e.indexOf(".gif")?!1:!0,!U&&G&&(n.style.visibility="visible")},H.onerror=function(){f({event:"error",event_details:"image load error",file_url:e},!0)},H.src=e.replace("\\'","'")}function c(){return P}function f(e,n){n&&(F=e),RiseVision.Common.LoggerUtils.logEvent(b(),e)}function d(e){"file"===w?(k[0]=e,D=!1,S.hide(),l(k[0])):"folder"===w&&(k=e,x=new RiseVision.Image.Slider(T),x.init(e))}function g(e){"file"===w?(k[0]=e,D&&S.hide(),l(k[0])):"folder"===w&&(k=e,x.refresh(k)),j=!1,P=!1,D=!1,F=null}function m(e){D=!0,S.show(e),U||i()}function p(e,n,t){T=_.clone(e),w=n,V=t,T.width=C.getInt("rsW"),T.height=C.getInt("rsH"),document.getElementById("container").style.height=C.getInt("rsH")+"px",a()}function v(){S.hide(),U||x.play()}function h(){t()}function y(){var e=document.querySelector("#container #image");U=!0,r(),"folder"===w&&x&&x.isReady()?x.pause():"file"===w&&e&&G&&(e.style.visibility="hidden")}function R(){var e=document.querySelector("#container #image");return U=!1,q||(f({event:"configuration",event_details:N},!1),q=!0),f({event:"play",file_url:o()},!1),j?(i(),void 0):D?("file"===w&&O&&O.retry(),void 0):("folder"===w&&x&&x.isReady()?x.play():"file"===w&&e&&G&&(e.style.visibility="visible"),void 0)}function b(){return"image_events"}function E(e,n){j=!0,P="undefined"!=typeof n,S.show(e),"folder"===w&&x&&x.isReady()&&x.destroy(),U||i()}function I(){y()}var w,V,C=new e.Prefs,S=null,T=null,O=null,A=null,L=null,x=null,k=[],F=null,N=null,M=null,j=!1,P=!1,q=!1,D=!1,U=!0,H=null,G=!1;return{hasStorageError:c,logEvent:f,onFileInit:d,onFileRefresh:g,onFileUnavailable:m,onSliderComplete:h,onSliderReady:v,pause:y,play:R,setAdditionalParams:p,getTableName:b,showError:E,stop:I}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Message=function(e,n){"use strict";function t(){try{n.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function r(){if(o){for(;n.firstChild;)n.removeChild(n.firstChild);n.style.display="none",e.style.visibility="visible",o=!1}}function i(t){var r,i=document.createDocumentFragment();o?(r=n.querySelector(".message"),r.innerHTML=t):(e.style.visibility="hidden",n.style.display="block",r=document.createElement("p"),r.innerHTML=t,r.setAttribute("class","message"),i.appendChild(r),n.appendChild(i),o=!0)}var o=!1;return t(),{hide:r,show:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function n(){var n=document.querySelector(".tp-banner ul"),t=document.createDocumentFragment(),r=[],i=null,o=null,s="";m=v.length,v.forEach(function(n){switch(i=document.createElement("li"),o=document.createElement("img"),i.setAttribute("data-transition","fade"),i.setAttribute("data-masterspeed",500),i.setAttribute("data-delay",1e3*e.duration),o.src="",o.setAttribute("data-lazyload",n.url),e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}o.setAttribute("data-bgposition",s),e.scaleToFit?o.setAttribute("data-bgfit","contain"):o.setAttribute("data-bgfit","normal"),i.appendChild(o),r.push(i)}),r.forEach(function(e){t.appendChild(e)
}),n.appendChild(t)}function t(e){V?d():b&&(b=!1,d(),RiseVision.Image.onSliderComplete(),E&&(p&&(r(),l(h)),E=!1)),e.slideIndex===m&&(b=!0)}function r(){$("body").off("touchend"),p.off("revolution.slide.onloaded"),p.off("revolution.slide.onchange"),p.revkill(),p=null}function i(){V=!0,clearTimeout(R),R=setTimeout(function(){p.revnext(),p.revresume(),V=!1,w=!0},1e3*e.pause),o()}function o(){e.autoHide&&(clearTimeout(y),y=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},C))}function s(){var n=void 0===e.duration||e.duration<1?1e4:1e3*e.duration;S=setTimeout(function(){RiseVision.Image.onSliderComplete()},n)}function a(){p&&(b=!1,d(),r())}function u(){return p&&v&&v.length>0?p.revcurrentslide():-1}function l(r){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),u=document.createElement("div"),l=document.createElement("ul");u.setAttribute("class","tp-banner"),u.appendChild(l),a.appendChild(u),s.appendChild(a),v=_.clone(r),n(),I=!0,p=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),p.on("revolution.slide.onloaded",function(){d(),I=!1,RiseVision.Image.onSliderReady()}),p.on("revolution.slide.onchange",function(e,n){t(n)}),$("body").on("touchend",".tp-banner",function(){i(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){i()}),o()}function c(){return!I}function f(){p&&(e.hasOwnProperty("resume")&&!e.resume&&p.revshowslide(0),w||(p.revresume(),w=!0),1===v.length&&s())}function d(){p&&w&&(p.revpause(),w=!1),S&&clearTimeout(S)}function g(e){RiseVision.Common.Utilities.preloadImages(e),1===v.length?p&&(clearTimeout(S),r(),l(e)):(h=_.clone(e),E=!0)}var m=0,p=null,v=null,h=null,y=null,R=null,b=!1,E=!1,I=!0,w=!1,V=!1,C=3e3,S=null;return{getCurrentSlide:u,destroy:a,init:l,isReady:c,play:f,pause:d,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e,n){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var n;e.detail&&e.detail.url&&(n=e.detail.url.replace("'","\\'"),s?(s=!1,RiseVision.Image.onFileInit(n)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(n):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-api-error",function(e){var n={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-no-file",function(e){var n={event:"error",event_details:"storage file not found",file_url:e.detail},t=document.getElementById("image");t.style.background="",RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var n={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-subscription-error",function(e){var n={event:"error",event_details:"storage subscription error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(n,!0)}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var n=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,t={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:n};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var n,t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,r={event:"error",event_details:"rise cache error",error_details:e.detail.error.message,file_url:t},s=0;RiseVision.Image.logEvent(r,!0),o.isV2Running()?n=o.getErrorMessage(s):(e.detail.error.message&&(s=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2)),n=i.getRiseCacheErrorMessage(s)),RiseVision.Image.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var n={event:"error",event_details:"rise cache not running",error_details:""};e.detail&&(e.detail.error?n.error_details=e.detail.error.message:e.detail.resp&&e.detail.resp.error&&(n.error_details=e.detail.resp.error.message)),RiseVision.Image.logEvent(n,!0),e.detail&&e.detail.isPlayerRunning&&RiseVision.Image.showError("Waiting for Rise Cache",!0)}),t.addEventListener("rise-cache-file-unavailable",function(){RiseVision.Image.onFileUnavailable("File is downloading")}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("displayId",n),t.setAttribute("env",config.STORAGE_ENV),t.go()}function r(){var e=document.querySelector("rise-storage");e&&e.go()}var i=RiseVision.Common.Utilities,o=RiseVision.Common.RiseCache,s=!0;return{init:t,retry:r}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e,n){"use strict";function t(e){var n;e.detail&&(e.detail.added&&u.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(n=_.find(u,function(n){return n.name===e.detail.name}),n.url=e.detail.url),e.detail.deleted&&(u=_.reject(u,function(n){return n.name===e.detail.name}))),u=_.sortBy(u,function(e){return e.name.toLowerCase()})}function r(e){return t(e),e.detail.added&&a?(u.length>1?(a=!1,clearTimeout(l),RiseVision.Image.onFileInit(u)):l=setTimeout(function(){a=!1,RiseVision.Image.onFileInit(u)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(u),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",r),t.addEventListener("rise-storage-api-error",function(e){var n={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var n={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-subscription-error",function(e){var n={event:"error",event_details:"storage subscription error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(n,!0)}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var n={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var n,t={event:"rise cache error",event_details:e.detail.error.message},r=0;RiseVision.Image.logEvent(t,!0),s.isV2Running()?n=s.getErrorMessage(r):(e.detail.error.message&&(r=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2)),n=o.getRiseCacheErrorMessage(r)),RiseVision.Image.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var n={event:"error",event_details:"rise cache not running",error_details:""};e.detail&&(e.detail.error?n.error_details=e.detail.error.message:e.detail.resp&&e.detail.resp.error&&(n.error_details=e.detail.resp.error.message)),RiseVision.Image.logEvent(n,!0),e.detail&&e.detail.isPlayerRunning&&RiseVision.Image.showError("Waiting for Rise Cache",!0)}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("displayId",n),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var o=RiseVision.Common.Utilities,s=RiseVision.Common.RiseCache,a=!0,u=[],l=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function n(e){var n;i.getFile(l,function(e,r){var s,a=0;r?r.message&&"File is downloading"===r.message?RiseVision.Image.onFileUnavailable(r.message):(n={event:"error",event_details:"non-storage error",error_details:r.message,file_url:e.url},RiseVision.Image.logEvent(n,!0),i.isV2Running()?s=i.getErrorMessage(a):(r.message&&(a=+r.message.substring(r.message.indexOf(":")+2)),s=o.getRiseCacheErrorMessage(a)),RiseVision.Image.showError(s)):u?(u=!1,RiseVision.Image.onFileInit(e.url),t()):RiseVision.Image.onFileRefresh(e.url)},e)}function t(){null===a&&(a=setInterval(function(){n(!0)},s))}function r(){l=e.url&&""!==e.url?e.url:e.selector.url,l=o.addProtocol(l),n(!0)}var i=RiseVision.Common.RiseCache,o=RiseVision.Common.Utilities,s=3e5,a=null,u=!0,l="";return{init:r}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.LocalStorageFile=function(){"use strict";function e(e){var n=e.clients;s||(n.includes("local-storage")?(RiseVision.Image.logEvent({event:"LS is present",file_url:o}),i.broadcastMessage({topic:"WATCH",filePath:o}),s=!0):RiseVision.Image.logEvent({event:"LS is not present",file_url:o}))}function n(e){var n=null;e.filePath&&e.filePath===o&&(RiseVision.Image.logEvent({event:"Test image FILE-UPDATE",event_details:JSON.stringify(e),file_url:e.filePath}),!a&&e.status&&"CURRENT"===e.status&&(n=new Image,n.onload=function(){RiseVision.Image.logEvent({event:"Test image loaded",file_url:e.ospath})},n.onerror=function(n){RiseVision.Image.logEvent({event:"Test image load failed",event_details:JSON.stringify(n),file_url:e.ospath})},RiseVision.Image.logEvent({event:"Attempt test image load",file_url:e.ospath}),n.src="file://"+e.ospath,a=!0))}function t(e){RiseVision.Image.logEvent({event:"Test image FILE-ERROR",event_details:JSON.stringify(e),file_url:e.filePath})}function r(){i.canConnect()&&(i.receiveMessages(function(r){if(!r||!r.topic)return RiseVision.Image.logEvent({event:"Invalid LMS message received",event_details:JSON.stringify(r),file_url:o}),void 0;switch(r.topic.toUpperCase()){case"CLIENT-LIST":return e(r);case"FILE-UPDATE":return n(r);case"FILE-ERROR":return t(r)}}),i.getModuleClientList())}var i=RiseVision.Common.WSClient,o="local-storage-test/test-1x1.png",s=!1,a=!1;return{init:r}},function(e,n,t){"use strict";function r(e,n){var t,r,i="",o="";Array.isArray(e)&&e.length>0&&Array.isArray(n)&&n.length>0&&("companyId"===e[0]&&(i=n[0]),"displayId"===e[1]&&(o=n[1]?n[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,o),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===e[2]&&(t=JSON.parse(n[2]),r=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(t,r,o)))}function i(){RiseVision.Image.pause()}function o(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){u&&""!==u&&(t.rpc.register("rscmd_play_"+u,o),t.rpc.register("rscmd_pause_"+u,i),t.rpc.register("rscmd_stop_"+u,s),t.rpc.register("rsparam_set_"+u,r),t.rpc.call("","rsparam_get",null,u,["companyId","displayId","additionalParams"]))}var u=(new t.Prefs).getString("id");e.oncontextmenu=function(){return!1},n.body.onmousedown=function(){return!1},RiseVision.Common.RiseCache.isRCV2Player(function(t){function r(){e.removeEventListener("WebComponentsReady",r),d=!0,f&&d&&a()}function i(){c.removeEventListener("rise-storage-ready",i),f=!0,f&&d&&a()}var o=n.createDocumentFragment(),s=n.createElement("link"),u=n.createElement("script"),l=config.COMPONENTS_PATH+(t?"rise-storage-v2":"rise-storage")+"/rise-storage.html",c=n.createElement("rise-storage"),f=!1,d=!1;u.src=config.COMPONENTS_PATH+"webcomponentsjs/webcomponents-lite.min.js",e.addEventListener("WebComponentsReady",r),n.getElementsByTagName("head")[0].appendChild(u),s.setAttribute("rel","import"),s.setAttribute("href",l),n.getElementsByTagName("head")[0].appendChild(s),c.setAttribute("refresh",5),t&&c.setAttribute("usage","widget"),c.addEventListener("rise-storage-ready",i),o.appendChild(c),n.body.appendChild(o)})}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
