var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var o=null;e.event?(o=e,o.file_url&&(o.file_format=n(o.file_url)),o.company_id=c,o.display_id=l,u&&(o.version=u),t(o)):t(o)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,o=e.getUTCDate();return 10>n&&(n="0"+n),10>o&&(o="0"+o),""+t+n+o}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function o(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},o=JSON.parse(JSON.stringify(n));return o.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),o.rows[0].json=JSON.parse(JSON.stringify(e)),o.rows[0].json.ts=(new Date).toISOString(),o}function i(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,n){try{top.postToPlayer({message:"widget-log",table:e,params:JSON.stringify(n),suffix:t()})}catch(o){console.log("widget-common.logEventToPlayer",o)}}function s(e,t){c=e,l=t}function a(e){u=e}var l="",c="",u=null;return{getInsertData:o,getFileFormat:n,logEvent:i,logEventToPlayer:r,setIds:s,setVersion:a}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-c<358e4?e({}):(t.open("POST",i,!0),t.onloadend=function(){var n={};try{n=JSON.parse(t.response)}catch(o){console.warn("Can't refresh logger token - ",o.message)}e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function o(o,i){function g(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",o),c=t.refreshedAt||c,u=t.token||u,n=e.getInsertData(i),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),i.cb&&"function"==typeof i.cb&&(a.onloadend=function(){i.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!o||!i||i.hasOwnProperty("event")&&!i.event||i.hasOwnProperty("event")&&n(i.event))&&i.display_id&&"preview"!==i.display_id&&"display_id"!==i.display_id&&"displayId"!==i.display_id){try{if(top.postToPlayer&&top.enableWidgetLogging)return e.logEventToPlayer(o,i)}catch(f){console.log("widget-common: logger",f)}return s=!0,l=i.event,setTimeout(function(){s=!1},a),t(g)}}var i="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",c=0,u="";return{log:o}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family: "+decodeURIComponent(t.font.family).replace(/'/g,"")+"; ",o="color: "+(t.color?t.color:t.forecolor)+"; ",i="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+";";return"."+e+" {"+n+o+i+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,o=e.length;o>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){function s(){r&&"function"==typeof r&&r()}function a(){s()}var l=null,c=[],u=[],g=[];if(!n||0===n.length)return s(),void 0;n.forEach(function(n){n.class&&n.fontStyle&&t([e(n.class,n.fontStyle)])});for(var f=0;f<n.length;f++)n[f].fontStyle&&n[f].fontStyle.font.type&&"google"===n[f].fontStyle.font.type&&(l=n[f].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),c.push(l));for(f=0;f<n.length;f++)n[f].fontStyle&&n[f].fontStyle.font.type&&"custom"===n[f].fontStyle.font.type&&(u.push(decodeURIComponent(n[f].fontStyle.font.family).replace(/'/g,"")),g.push(n[f].fontStyle.font.url.replace(/'/g,"\\'")));if(0===c.length&&0===u.length)s();else{for(var d=0;d<u.length;d+=1)o(u[d],g[d]);c.length>0?i(c,a):s()}}function o(e,t,n){var o=null,i="font-family: "+e+"; src: url('"+t+"');";n=n||document,o=n.styleSheets[0],null!==o&&o.addRule("@font-face",i)}function i(e,t){WebFont.load({google:{families:e},active:function(){t&&"function"==typeof t&&t()},inactive:function(){t&&"function"==typeof t&&t()},timeout:2e3})}function r(e){var t=document.createElement("script");t.src=e,document.body.appendChild(t)}function s(e){for(var t=e.length,n=[],o=0;t>o;o++)n[o]=new Image,n[o].src=e[o]}function a(e){return l(e,window.location.search.substring(1))}function l(e,t){for(var n,o=t.split("&"),i=0;i<o.length;i++)if(n=o[i].split("="),n[0]==e)return decodeURIComponent(n[1]);return""}function c(e){var t=/(\d{4})\.(\d{2})\.(\d{2})\.(\d{2})\.(\d{2})/,n=t.exec(e);return n?new Date(+n[1],+n[2]-1,+n[3],+n[4],+n[5]):void 0}function u(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}function g(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent}function f(e,t){var n=new XMLHttpRequest;if(e&&t&&"function"==typeof t){n.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{n.send(),t(n.status>=200&&n.status<304)}catch(o){t(!1)}}}function d(){var e=25,t=navigator.userAgent.match(/Chrome\/(\S+)/),n=t?t[1]:0;return n&&(n=parseInt(n.substring(0,n.indexOf("."))),e>=n)?!0:!1}function m(e,t){return/^(?:f|ht)tps?\:\/\//.test(e)||(e=(t?"https://":"http://")+e),e}return{addProtocol:m,getQueryParameter:a,getQueryStringParameter:l,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:o,loadGoogleFonts:i,loadScript:r,preloadImages:s,getRiseCacheErrorMessage:u,unescapeHTML:g,hasInternetConnection:f,isLegacy:d,getDateObjectFromPlayerVersionString:c}}();var config={STORAGE_ENV:"prod"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var RiseVision=RiseVision||{};RiseVision.WebPage={},RiseVision.WebPage=function(e,t){"use strict";function n(){t.rpc.call("","rsevent_ready",null,v.getString("id"),!0,!0,!0,!0,!1)}function o(t){var n=e.querySelector(".blocker");n.style.display=b.interactivity.interactive?"none":"block",t.setAttribute("scrolling",b.interactivity.interactive&&b.interactivity.scrollbars?"yes":"no")}function i(){var t=e.getElementById("container"),n=v.getInt("rsH")/v.getInt("rsW")*100;t&&(0!==R&&(n+=R/v.getInt("rsW")*100),t.setAttribute("style","padding-bottom:"+n+"%"))}function r(e){var t=parseFloat(b.zoom),n="",o="";o="-ms-zoom:"+t+";-moz-transform: scale("+t+");-moz-transform-origin: 0 0;-o-transform: scale("+t+");-o-transform-origin: 0 0;-webkit-transform: scale("+t+");-webkit-transform-origin: 0 0;transform: scale("+t+");transform-origin: 0 0;",n=e.getAttribute("style"),o+="width: "+(1/t*100+I)+"%;height: "+1/t*100+"%;",n&&(o=n+o),e.setAttribute("style",o)}function s(e){var t="",n="",o=0;b.region&&b.region.showRegion&&"region"===b.region.showRegion&&(b.region.horizontal>0&&(o=b.region.horizontal),b.region.vertical>0&&(R=b.region.vertical),(0!==o||0!==R)&&(I=100*o/v.getInt("rsW"),t=e.getAttribute("style"),n="margin: -"+R+"px 0 0 -"+o+"px;",t&&(n=t+n),e.setAttribute("style",n)))}function a(){_=setInterval(function(){C.hasInternetConnection("img/transparent.png",function(e){e&&c()})},b.refresh)}function l(){var t=e.createElement("iframe"),n=e.getElementById("container");return t.className="webpage-frame",t.style.visibility="hidden",t.setAttribute("frameborder","0"),t.setAttribute("allowTransparency","true"),t.setAttribute("sandbox","allow-forms allow-same-origin allow-scripts"),o(t),s(t),r(t),i(),t.onload=function(){this.onload=null,this.style.visibility="visible",E=!1,b.refresh>0&&null===_&&a(),e.querySelectorAll(".webpage-frame").length>1&&n.removeChild(e.querySelector(".webpage-frame"))},t}function c(){var t=e.getElementById("container"),n=e.createDocumentFragment(),o=l();o.setAttribute("src",w),n.appendChild(o),t.appendChild(n)}function u(){var t=e.getElementById("container"),n=e.querySelector(".webpage-frame");b.refresh>0&&(clearInterval(_),_=null),n&&t.removeChild(n)}function g(){O=new RiseVision.Common.Message(e.getElementById("container"),e.getElementById("messageContainer")),e.getElementById("messageContainer").style.height=v.getInt("rsH")+"px",w=b.url,-1===w.indexOf("://")&&(w="http://"+w),n()}function f(){return"webpage_events"}function d(e){RiseVision.Common.LoggerUtils.logEvent(f(),e)}function m(){b.unload&&u()}function p(){d({event:"play",url:w}),(E||b.unload)&&c()}function y(){m()}function h(e){b=JSON.parse(JSON.stringify(e)),g()}var v=new t.Prefs,C=RiseVision.Common.Utilities,b=null,w="",R=0,_=null,E=!0,I=0,O=null;return{getTableName:f,logEvent:d,setAdditionalParams:h,pause:m,play:p,stop:y}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function o(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.display="block",r=!1}}function i(n){var o,i=document.createDocumentFragment();r?(o=t.querySelector(".message"),o.innerHTML=n):(e.style.display="none",t.style.display="block",o=document.createElement("p"),o.innerHTML=n,o.setAttribute("class","message"),i.appendChild(o),t.appendChild(i),r=!0)}var r=!1;return n(),{hide:o,show:i}},function(e,t,n){"use strict";function o(e,t){var n,o="",i="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(o=t[0]),"displayId"===e[1]&&(i=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,i),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),RiseVision.WebPage.setAdditionalParams(n)))}function i(){RiseVision.WebPage.play()}function r(){RiseVision.WebPage.pause()}function s(){RiseVision.WebPage.stop()}var a=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},a&&""!==a&&(n.rpc.register("rscmd_play_"+a,i),n.rpc.register("rscmd_pause_"+a,r),n.rpc.register("rscmd_stop_"+a,s),n.rpc.register("rsparam_set_"+a,o),n.rpc.call("","rsparam_get",null,a,["companyId","displayId","additionalParams"]))}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-6"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
