!function(){function e(e){return e.call.apply(e.bind,arguments)}function t(e,t){if(!e)throw Error();if(2<arguments.length){var n=Array.prototype.slice.call(arguments,2);return function(){var i=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(i,n),e.apply(t,i)}}return function(){return e.apply(t,arguments)}}function n(){return n=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?e:t,n.apply(null,arguments)}function i(e,t){this.a=e,this.m=t||e,this.c=this.m.document}function a(e,t,n,i){if(t=e.c.createElement(t),n)for(var a in n)n.hasOwnProperty(a)&&("style"==a?t.style.cssText=n[a]:t.setAttribute(a,n[a]));return i&&t.appendChild(e.c.createTextNode(i)),t}function r(e,t,n){e=e.c.getElementsByTagName(t)[0],e||(e=document.documentElement),e.insertBefore(n,e.lastChild)}function o(e){e.parentNode&&e.parentNode.removeChild(e)}function s(e,t,n){t=t||[],n=n||[];for(var i=e.className.split(/\s+/),a=0;a<t.length;a+=1){for(var r=!1,o=0;o<i.length;o+=1)if(t[a]===i[o]){r=!0;break}r||i.push(t[a])}for(t=[],a=0;a<i.length;a+=1){for(r=!1,o=0;o<n.length;o+=1)if(i[a]===n[o]){r=!0;break}r||t.push(i[a])}e.className=t.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function c(e,t){for(var n=e.className.split(/\s+/),i=0,a=n.length;a>i;i++)if(n[i]==t)return!0;return!1}function u(e){if("string"==typeof e.f)return e.f;var t=e.m.location.protocol;return"about:"==t&&(t=e.a.location.protocol),"https:"==t?"https:":"http:"}function l(e){return e.m.location.hostname||e.a.location.hostname}function f(e,t,n){function i(){u&&o&&s&&(u(c),u=null)}t=a(e,"link",{rel:"stylesheet",href:t,media:"all"});var o=!1,s=!0,c=null,u=n||null;it?(t.onload=function(){o=!0,i()},t.onerror=function(){o=!0,c=Error("Stylesheet failed to load"),i()}):setTimeout(function(){o=!0,i()},0),r(e,"head",t)}function h(e,t,n,i){var r=e.c.getElementsByTagName("head")[0];if(r){var o=a(e,"script",{src:t}),s=!1;return o.onload=o.onreadystatechange=function(){s||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(s=!0,n&&n(null),o.onload=o.onreadystatechange=null,"HEAD"==o.parentNode.tagName&&r.removeChild(o))},r.appendChild(o),setTimeout(function(){s||(s=!0,n&&n(Error("Script load timeout")))},i||5e3),o}return null}function d(){this.a=0,this.c=null}function m(e){return e.a++,function(){e.a--,p(e)}}function A(e,t){e.c=t,p(e)}function p(e){0==e.a&&e.c&&(e.c(),e.c=null)}function g(e){this.a=e||"-"}function _(e,t){this.c=e,this.f=4,this.a="n";var n=(t||"n4").match(/^([nio])([1-9])$/i);n&&(this.a=n[1],this.f=parseInt(n[2],10))}function M(e){return y(e)+" "+(e.f+"00")+" 300px "+T(e.c)}function T(e){var t=[];e=e.split(/,\s*/);for(var n=0;n<e.length;n++){var i=e[n].replace(/['"]/g,"");-1!=i.indexOf(" ")||/^\d/.test(i)?t.push("'"+i+"'"):t.push(i)}return t.join(",")}function b(e){return e.a+e.f}function y(e){var t="normal";return"o"===e.a?t="oblique":"i"===e.a&&(t="italic"),t}function S(e){var t=4,n="n",i=null;return e&&((i=e.match(/(normal|oblique|italic)/i))&&i[1]&&(n=i[1].substr(0,1).toLowerCase()),(i=e.match(/([1-9]00|normal|bold)/i))&&i[1]&&(/bold/i.test(i[1])?t=7:/[1-9]00/.test(i[1])&&(t=parseInt(i[1].substr(0,1),10)))),n+t}function v(e,t){this.c=e,this.f=e.m.document.documentElement,this.h=t,this.a=new g("-"),this.j=!1!==t.events,this.g=!1!==t.classes}function w(e){e.g&&s(e.f,[e.a.c("wf","loading")]),D(e,"loading")}function E(e){if(e.g){var t=c(e.f,e.a.c("wf","active")),n=[],i=[e.a.c("wf","loading")];t||n.push(e.a.c("wf","inactive")),s(e.f,n,i)}D(e,"inactive")}function D(e,t,n){e.j&&e.h[t]&&(n?e.h[t](n.c,b(n)):e.h[t]())}function C(){this.c={}}function z(e,t,n){var i,a=[];for(i in t)if(t.hasOwnProperty(i)){var r=e.c[i];r&&a.push(r(t[i],n))}return a}function O(e,t){this.c=e,this.f=t,this.a=a(this.c,"span",{"aria-hidden":"true"},this.f)}function k(e){r(e.c,"body",e.a)}function P(e){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+T(e.c)+";"+("font-style:"+y(e)+";font-weight:"+(e.f+"00")+";")}function W(e,t,n,i,a,r){this.g=e,this.j=t,this.a=i,this.c=n,this.f=a||3e3,this.h=r||void 0}function Y(e,t,n,i,a,r,o){this.v=e,this.B=t,this.c=n,this.a=i,this.s=o||"BESbswy",this.f={},this.w=a||3e3,this.u=r||null,this.o=this.j=this.h=this.g=null,this.g=new O(this.c,this.s),this.h=new O(this.c,this.s),this.j=new O(this.c,this.s),this.o=new O(this.c,this.s),e=new _(this.a.c+",serif",b(this.a)),e=P(e),this.g.a.style.cssText=e,e=new _(this.a.c+",sans-serif",b(this.a)),e=P(e),this.h.a.style.cssText=e,e=new _("serif",b(this.a)),e=P(e),this.j.a.style.cssText=e,e=new _("sans-serif",b(this.a)),e=P(e),this.o.a.style.cssText=e,k(this.g),k(this.h),k(this.j),k(this.o)}function B(){if(null===rt){var e=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);rt=!!e&&(536>parseInt(e[1],10)||536===parseInt(e[1],10)&&11>=parseInt(e[2],10))}return rt}function G(e,t,n){for(var i in at)if(at.hasOwnProperty(i)&&t===e.f[at[i]]&&n===e.f[at[i]])return!0;return!1}function L(e){var t,n=e.g.a.offsetWidth,i=e.h.a.offsetWidth;(t=n===e.f.serif&&i===e.f["sans-serif"])||(t=B()&&G(e,n,i)),t?nt()-e.A>=e.w?B()&&G(e,n,i)&&(null===e.u||e.u.hasOwnProperty(e.a.c))?N(e,e.v):N(e,e.B):R(e):N(e,e.v)}function R(e){setTimeout(n(function(){L(this)},e),50)}function N(e,t){setTimeout(n(function(){o(this.g.a),o(this.h.a),o(this.j.a),o(this.o.a),t(this.a)},e),0)}function x(e,t,n){this.c=e,this.a=t,this.f=0,this.o=this.j=!1,this.s=n}function q(e){0==--e.f&&e.j&&(e.o?(e=e.a,e.g&&s(e.f,[e.a.c("wf","active")],[e.a.c("wf","loading"),e.a.c("wf","inactive")]),D(e,"active")):E(e.a))}function I(e){this.j=e,this.a=new C,this.h=0,this.f=this.g=!0}function V(e,t,i,a,r){var o=0==--e.h;(e.f||e.g)&&setTimeout(function(){var e=r||null,c=a||null||{};if(0===i.length&&o)E(t.a);else{t.f+=i.length,o&&(t.j=o);var u,l=[];for(u=0;u<i.length;u++){var f=i[u],h=c[f.c],d=t.a,m=f;if(d.g&&s(d.f,[d.a.c("wf",m.c,b(m).toString(),"loading")]),D(d,"fontloading",m),d=null,null===ot)if(window.FontFace){var m=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),A=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);ot=m?42<parseInt(m[1],10):A?!1:!0}else ot=!1;d=ot?new W(n(t.g,t),n(t.h,t),t.c,f,t.s,h):new Y(n(t.g,t),n(t.h,t),t.c,f,t.s,e,h),l.push(d)}for(u=0;u<l.length;u++)l[u].start()}},0)}function H(e,t,n){var i=[],a=n.timeout;w(t);var i=z(e.a,n,e.c),r=new x(e.c,t,a);for(e.h=i.length,t=0,n=i.length;n>t;t++)i[t].load(function(t,n,i){V(e,r,t,n,i)})}function U(e,t){this.c=e,this.a=t}function j(e,t,n){var i=u(e.c);return e=(e.a.api||"fast.fonts.net/jsapi").replace(/^.*http(s?):(\/\/)?/,""),i+"//"+e+"/"+t+".js"+(n?"?v="+n:"")}function F(e,t){this.c=e,this.a=t}function K(e,t,n){this.c=e?e:t+st,this.a=[],this.f=[],this.g=n||""}function X(e,t){for(var n=t.length,i=0;n>i;i++){var a=t[i].split(":");3==a.length&&e.f.push(a.pop());var r="";2==a.length&&""!=a[1]&&(r=":"),e.a.push(a.join(r))}}function J(e){if(0==e.a.length)throw Error("No fonts to load!");if(-1!=e.c.indexOf("kit="))return e.c;for(var t=e.a.length,n=[],i=0;t>i;i++)n.push(e.a[i].replace(/ /g,"+"));return t=e.c+"?family="+n.join("%7C"),0<e.f.length&&(t+="&subset="+e.f.join(",")),0<e.g.length&&(t+="&text="+encodeURIComponent(e.g)),t}function Z(e){this.f=e,this.a=[],this.c={}}function Q(e){for(var t=e.f.length,n=0;t>n;n++){var i=e.f[n].split(":"),a=i[0].replace(/\+/g," "),r=["n4"];if(2<=i.length){var o,s=i[1];if(o=[],s)for(var s=s.split(","),c=s.length,u=0;c>u;u++){var l;if(l=s[u],l.match(/^[\w-]+$/)){var f=ft.exec(l.toLowerCase());if(null==f)l="";else{if(l=f[2],l=null==l||""==l?"n":lt[l],f=f[1],null==f||""==f)f="4";else var h=ut[f],f=h?h:isNaN(f)?"4":f.substr(0,1);l=[l,f].join("")}}else l="";l&&o.push(l)}0<o.length&&(r=o),3==i.length&&(i=i[2],o=[],i=i?i.split(","):o,0<i.length&&(i=ct[i[0]])&&(e.c[a]=i))}for(e.c[a]||(i=ct[a])&&(e.c[a]=i),i=0;i<r.length;i+=1)e.a.push(new _(a,r[i]))}}function $(e,t){this.c=e,this.a=t}function et(e,t){this.c=e,this.a=t}function tt(e,t){this.c=e,this.f=t,this.a=[]}var nt=Date.now||function(){return+new Date},it=!!window.FontFace;g.prototype.c=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t].replace(/[\W_]+/g,"").toLowerCase());return e.join(this.a)},W.prototype.start=function(){var e=this.c.m.document,t=this,n=nt(),i=new Promise(function(i,a){function r(){nt()-n>=t.f?a():e.fonts.load(M(t.a),t.h).then(function(e){1<=e.length?i():setTimeout(r,25)},function(){a()})}r()}),a=new Promise(function(e,n){setTimeout(n,t.f)});Promise.race([a,i]).then(function(){t.g(t.a)},function(){t.j(t.a)})};var at={D:"serif",C:"sans-serif"},rt=null;Y.prototype.start=function(){this.f.serif=this.j.a.offsetWidth,this.f["sans-serif"]=this.o.a.offsetWidth,this.A=nt(),L(this)};var ot=null;x.prototype.g=function(e){var t=this.a;t.g&&s(t.f,[t.a.c("wf",e.c,b(e).toString(),"active")],[t.a.c("wf",e.c,b(e).toString(),"loading"),t.a.c("wf",e.c,b(e).toString(),"inactive")]),D(t,"fontactive",e),this.o=!0,q(this)},x.prototype.h=function(e){var t=this.a;if(t.g){var n=c(t.f,t.a.c("wf",e.c,b(e).toString(),"active")),i=[],a=[t.a.c("wf",e.c,b(e).toString(),"loading")];n||i.push(t.a.c("wf",e.c,b(e).toString(),"inactive")),s(t.f,i,a)}D(t,"fontinactive",e),q(this)},I.prototype.load=function(e){this.c=new i(this.j,e.context||this.j),this.g=!1!==e.events,this.f=!1!==e.classes,H(this,new v(this.c,e),e)},U.prototype.load=function(e){function t(){if(r["__mti_fntLst"+i]){var n,a=r["__mti_fntLst"+i](),o=[];if(a)for(var s=0;s<a.length;s++){var c=a[s].fontfamily;void 0!=a[s].fontStyle&&void 0!=a[s].fontWeight?(n=a[s].fontStyle+a[s].fontWeight,o.push(new _(c,n))):o.push(new _(c))}e(o)}else setTimeout(function(){t()},50)}var n=this,i=n.a.projectId,a=n.a.version;if(i){var r=n.c.m;h(this.c,j(n,i,a),function(a){a?e([]):(r["__MonotypeConfiguration__"+i]=function(){return n.a},t())}).id="__MonotypeAPIScript__"+i}else e([])},F.prototype.load=function(e){var t,n,i=this.a.urls||[],a=this.a.families||[],r=this.a.testStrings||{},o=new d;for(t=0,n=i.length;n>t;t++)f(this.c,i[t],m(o));var s=[];for(t=0,n=a.length;n>t;t++)if(i=a[t].split(":"),i[1])for(var c=i[1].split(","),u=0;u<c.length;u+=1)s.push(new _(i[0],c[u]));else s.push(new _(i[0]));A(o,function(){e(s,r)})};var st="//fonts.googleapis.com/css",ct={latin:"BESbswy","latin-ext":"çöüğş",cyrillic:"йяЖ",greek:"αβΣ",khmer:"កខគ",Hanuman:"កខគ"},ut={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},lt={i:"i",italic:"i",n:"n",normal:"n"},ft=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/,ht={Arimo:!0,Cousine:!0,Tinos:!0};$.prototype.load=function(e){var t=new d,n=this.c,i=new K(this.a.api,u(n),this.a.text),a=this.a.families;X(i,a);var r=new Z(a);Q(r),f(n,J(i),m(t)),A(t,function(){e(r.a,r.c,ht)})},et.prototype.load=function(e){var t=this.a.id,n=this.c.m;t?h(this.c,(this.a.api||"https://use.typekit.net")+"/"+t+".js",function(t){if(t)e([]);else if(n.Typekit&&n.Typekit.config&&n.Typekit.config.fn){t=n.Typekit.config.fn;for(var i=[],a=0;a<t.length;a+=2)for(var r=t[a],o=t[a+1],s=0;s<o.length;s++)i.push(new _(r,o[s]));try{n.Typekit.load({events:!1,classes:!1,async:!0})}catch(c){}e(i)}},2e3):e([])},tt.prototype.load=function(e){var t=this.f.id,n=this.c.m,i=this;t?(n.__webfontfontdeckmodule__||(n.__webfontfontdeckmodule__={}),n.__webfontfontdeckmodule__[t]=function(t,n){for(var a=0,r=n.fonts.length;r>a;++a){var o=n.fonts[a];i.a.push(new _(o.name,S("font-weight:"+o.weight+";font-style:"+o.style)))}e(i.a)},h(this.c,u(this.c)+(this.f.api||"//f.fontdeck.com/s/css/js/")+l(this.c)+"/"+t+".js",function(t){t&&e([])})):e([])};var dt=new I(window);dt.a.c.custom=function(e,t){return new F(t,e)},dt.a.c.fontdeck=function(e,t){return new tt(t,e)},dt.a.c.monotype=function(e,t){return new U(t,e)},dt.a.c.typekit=function(e,t){return new et(t,e)},dt.a.c.google=function(e,t){return new $(t,e)};var mt={load:n(dt.load,dt)};"function"==typeof define&&define.amd?define(function(){return mt}):"undefined"!=typeof module&&module.exports?module.exports=mt:(window.WebFont=mt,window.WebFontConfig&&dt.load(window.WebFontConfig))}();var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=c,i.display_id=s,u&&(i.version=u),t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),""+t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function a(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,t){c=e,s=t}function o(e){u=e}var s="",c="",u=null;return{getInsertData:i,getFileFormat:n,logEvent:a,setIds:r,setVersion:o}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-u<358e4?e({}):(t.open("POST",a,!0),t.onloadend=function(){var n={};try{n=JSON.parse(t.response)}catch(i){console.warn("Can't refresh logger token - ",i.message)}e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return o&&c===e}function i(i,a){function f(t){var n,o,s=new XMLHttpRequest;o=r.replace("TABLE_ID",i),u=t.refreshedAt||u,l=t.token||l,n=e.getInsertData(a),s.open("POST",o,!0),s.setRequestHeader("Content-Type","application/json"),s.setRequestHeader("Authorization","Bearer "+l),a.cb&&"function"==typeof a.cb&&(s.onloadend=function(){a.cb(s.response)}),s.send(JSON.stringify(n))}if(!(!i||!a||a.hasOwnProperty("event")&&!a.event||a.hasOwnProperty("event")&&n(a.event)))return o=!0,c=a.event,setTimeout(function(){o=!1},s),t(f)}var a="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",o=!1,s=1e3,c="",u=0,l="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest,n=this;e&&"function"==typeof e&&(f?t.open("GET",c,!0):t.open("GET",c+"ping?callback=_",!0),t.onreadystatechange=function(){try{if(4===t.readyState)if(u=!0,200===t.status)l=!0,e(!0,t.responseText);else{if(404===t.status)return f=!0,n.ping(e);console.debug("Rise Cache is not running"),l=!1,e(!1,null)}}catch(i){console.debug("Caught exception: ",i.description)}},t.send())}function t(e,t,n){function i(){var t,i,r;l?t=f?c+"files?url="+encodeURIComponent(e):n?c+"?url="+encodeURIComponent(e):c+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):n?t=e:(i=e.split("?"),r=1===i.length?"?":"&",t=e+r+"cb="+(new Date).getTime()),a("HEAD",t)}function a(e,n){var i=new XMLHttpRequest,o={xhr:i,url:n};l?(i.open(e,n,!0),i.addEventListener("loadend",function(){var s=i.status||0;202===s?(r++,3>r?setTimeout(function(){a(e,n)},3e3):t(o,new Error("File is downloading"))):s>=200&&300>s?t(o):"HEAD"===e?a("GET",n):t(o,new Error("The request failed with status code: "+s))}),i.send()):t(o)}if(e&&t&&"function"==typeof t){var r=0;return u?i():this.ping(i)}}function n(e){var t="";switch(e){case 502:t="There was a problem retrieving the file.";break;case 504:t="Unable to download the file. The server is not responding.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;case 534:t="The file does not exist or cannot be accessed.";break;default:t=""}return t}function i(e){return e&&"function"==typeof e?u?(e(l),void 0):this.ping(function(){e(l)}):void 0}function a(e){return e&&"function"==typeof e?u?(e(f),void 0):this.ping(function(){e(f)}):void 0}function r(e){return e&&"function"==typeof e?this.isV2Running(function(t){t?e(t):e(o())}):void 0}function o(){var e=h.getDateObjectFromPlayerVersionString("2016.10.10.00.00"),t=h.getQueryParameter("sysInfo");if(!t){var n=h.getQueryParameter("parent");t=h.getQueryStringParameter("sysInfo",n)}if(t){var i=h.getQueryStringParameter("pv",t),a=h.getDateObjectFromPlayerVersionString(i);return a>=e}return!1}function s(){u=!1,l=!1,f=!1}var c="http://localhost:9494/",u=!1,l=!1,f=!1,h=RiseVision.Common.Utilities;return{getErrorMessage:n,getFile:t,isRiseCacheRunning:i,isV2Running:a,isRCV2Player:r,ping:e,reset:s}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family: "+decodeURIComponent(t.font.family).replace(/'/g,"")+"; ",i="color: "+(t.color?t.color:t.forecolor)+"; ",a="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),r="font-weight: "+(t.bold?"bold":"normal")+"; ",o="font-style: "+(t.italic?"italic":"normal")+"; ",s="text-decoration: "+(t.underline?"underline":"none")+"; ",c="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+";";return"."+e+" {"+n+i+a+r+o+s+c+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){function o(){r&&"function"==typeof r&&r()}function s(){o()}var c=null,u=[],l=[],f=[];if(!n||0===n.length)return o(),void 0;n.forEach(function(n){n.class&&n.fontStyle&&t([e(n.class,n.fontStyle)])});for(var h=0;h<n.length;h++)n[h].fontStyle&&n[h].fontStyle.font.type&&"google"===n[h].fontStyle.font.type&&(c=n[h].fontStyle.font.family.split(",")[0],c=c.replace(/'/g,""),u.push(c));for(h=0;h<n.length;h++)n[h].fontStyle&&n[h].fontStyle.font.type&&"custom"===n[h].fontStyle.font.type&&(l.push(decodeURIComponent(n[h].fontStyle.font.family).replace(/'/g,"")),f.push(n[h].fontStyle.font.url.replace(/'/g,"\\'")));if(0===u.length&&0===l.length)o();else{for(var d=0;d<l.length;d+=1)i(l[d],f[d]);u.length>0?a(u,s):o()}}function i(e,t,n){var i=null,a="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",a)}function a(e,t){WebFont.load({google:{families:e},active:function(){t&&"function"==typeof t&&t()},inactive:function(){t&&"function"==typeof t&&t()},timeout:2e3})}function r(e){var t=document.createElement("script");t.src=e,document.body.appendChild(t)}function o(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){return c(e,window.location.search.substring(1))}function c(e,t){for(var n,i=t.split("&"),a=0;a<i.length;a++)if(n=i[a].split("="),n[0]==e)return decodeURIComponent(n[1]);return""}function u(e){var t=/(\d{4})\.(\d{2})\.(\d{2})\.(\d{2})\.(\d{2})/,n=t.exec(e);return n?new Date(+n[1],+n[2]-1,+n[3],+n[4],+n[5]):void 0}function l(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}function f(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent}function h(e,t){var n=new XMLHttpRequest;if(e&&t&&"function"==typeof t){n.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{n.send(),t(n.status>=200&&n.status<304)}catch(i){t(!1)}}}function d(){var e=25,t=navigator.userAgent.match(/Chrome\/(\S+)/),n=t?t[1]:0;return n&&(n=parseInt(n.substring(0,n.indexOf("."))),e>=n)?!0:!1}function m(e,t){return/^(?:f|ht)tps?\:\/\//.test(e)||(e=(t?"https://":"http://")+e),e}return{addProtocol:m,getQueryParameter:s,getQueryStringParameter:c,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFonts:a,loadScript:r,preloadImages:o,getRiseCacheErrorMessage:l,unescapeHTML:f,hasInternetConnection:h,isLegacy:d,getDateObjectFromPlayerVersionString:u}}(),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return Fi.apply(null,arguments)}function t(e){Fi=e}function n(e){return"[object Array]"===Object.prototype.toString.call(e)}function i(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function a(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function o(e,t){for(var n in t)r(t,n)&&(e[n]=t[n]);return r(t,"toString")&&(e.toString=t.toString),r(t,"valueOf")&&(e.valueOf=t.valueOf),e}function s(e,t,n,i){return zt(e,t,n,i,!0).utc()}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function u(e){return null==e._pf&&(e._pf=c()),e._pf}function l(e){if(null==e._isValid){var t=u(e);e._isValid=!(isNaN(e._d.getTime())||!(t.overflow<0)||t.empty||t.invalidMonth||t.invalidWeekday||t.nullInput||t.invalidFormat||t.userInvalidated),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function f(e){var t=s(0/0);return null!=e?o(u(t),e):u(t).userInvalidated=!0,t}function h(e){return void 0===e}function d(e,t){var n,i,a;if(h(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),h(t._i)||(e._i=t._i),h(t._f)||(e._f=t._f),h(t._l)||(e._l=t._l),h(t._strict)||(e._strict=t._strict),h(t._tzm)||(e._tzm=t._tzm),h(t._isUTC)||(e._isUTC=t._isUTC),h(t._offset)||(e._offset=t._offset),h(t._pf)||(e._pf=u(t)),h(t._locale)||(e._locale=t._locale),Xi.length>0)for(n in Xi)i=Xi[n],a=t[i],h(a)||(e[i]=a);return e}function m(t){d(this,t),this._d=new Date(null!=t._d?t._d.getTime():0/0),Ji===!1&&(Ji=!0,e.updateOffset(this),Ji=!1)}function A(e){return e instanceof m||null!=e&&null!=e._isAMomentObject}function p(e){return 0>e?Math.ceil(e):Math.floor(e)}function g(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=p(t)),n}function _(e,t,n){var i,a=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),o=0;for(i=0;a>i;i++)(n&&e[i]!==t[i]||!n&&g(e[i])!==g(t[i]))&&o++;return o+r}function M(){}function T(e){return e?e.toLowerCase().replace("_","-"):e}function b(e){for(var t,n,i,a,r=0;r<e.length;){for(a=T(e[r]).split("-"),t=a.length,n=T(e[r+1]),n=n?n.split("-"):null;t>0;){if(i=y(a.slice(0,t).join("-")))return i;if(n&&n.length>=t&&_(a,n,!0)>=t-1)break;t--}r++}return null}function y(e){var t=null;if(!Zi[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=Ki._abbr,require("./locale/"+e),S(t)}catch(n){}return Zi[e]}function S(e,t){var n;return e&&(n=h(t)?w(e):v(e,t),n&&(Ki=n)),Ki._abbr}function v(e,t){return null!==t?(t.abbr=e,Zi[e]=Zi[e]||new M,Zi[e].set(t),S(e),Zi[e]):(delete Zi[e],null)}function w(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ki;if(!n(e)){if(t=y(e))return t;e=[e]}return b(e)}function E(e,t){var n=e.toLowerCase();Qi[n]=Qi[n+"s"]=Qi[t]=e}function D(e){return"string"==typeof e?Qi[e]||Qi[e.toLowerCase()]:void 0}function C(e){var t,n,i={};for(n in e)r(e,n)&&(t=D(n),t&&(i[t]=e[n]));return i}function z(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function O(t,n){return function(i){return null!=i?(P(this,t,i),e.updateOffset(this,n),this):k(this,t)}}function k(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():0/0}function P(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function W(e,t){var n;if("object"==typeof e)for(n in e)this.set(n,e[n]);else if(e=D(e),z(this[e]))return this[e](t);return this}function Y(e,t,n){var i=""+Math.abs(e),a=t-i.length,r=e>=0;return(r?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+i}function B(e,t,n,i){var a=i;"string"==typeof i&&(a=function(){return this[i]()}),e&&(na[e]=a),t&&(na[t[0]]=function(){return Y(a.apply(this,arguments),t[1],t[2])}),n&&(na[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function G(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function L(e){var t,n,i=e.match($i);for(t=0,n=i.length;n>t;t++)i[t]=na[i[t]]?na[i[t]]:G(i[t]);return function(a){var r="";for(t=0;n>t;t++)r+=i[t]instanceof Function?i[t].call(a,e):i[t];return r}}function R(e,t){return e.isValid()?(t=N(t,e.localeData()),ta[t]=ta[t]||L(t),ta[t](e)):e.localeData().invalidDate()}function N(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(ea.lastIndex=0;i>=0&&ea.test(e);)e=e.replace(ea,n),ea.lastIndex=0,i-=1;return e}function x(e,t,n){Ta[e]=z(t)?t:function(e){return e&&n?n:t}}function q(e,t){return r(Ta,e)?Ta[e](t._strict,t._locale):new RegExp(I(e))}function I(e){return V(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,a){return t||n||i||a}))}function V(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function H(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(i=function(e,n){n[t]=g(e)}),n=0;n<e.length;n++)ba[e[n]]=i}function U(e,t){H(e,function(e,n,i,a){i._w=i._w||{},t(e,i._w,i,a)})}function j(e,t,n){null!=t&&r(ba,e)&&ba[e](t,n._a,n,e)}function F(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function K(e,t){return n(this._months)?this._months[e.month()]:this._months[ka.test(t)?"format":"standalone"][e.month()]}function X(e,t){return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ka.test(t)?"format":"standalone"][e.month()]}function J(e,t,n){var i,a,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(a=s([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(r="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[i]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function Z(e,t){var n;return e.isValid()?"string"==typeof t&&(t=e.localeData().monthsParse(t),"number"!=typeof t)?e:(n=Math.min(e.date(),F(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e):e}function Q(t){return null!=t?(Z(this,t),e.updateOffset(this,!0),this):k(this,"Month")}function $(){return F(this.year(),this.month())}function et(e){return this._monthsParseExact?(r(this,"_monthsRegex")||nt.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}function tt(e){return this._monthsParseExact?(r(this,"_monthsRegex")||nt.call(this),e?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}function nt(){function e(e,t){return t.length-e.length}var t,n,i=[],a=[],r=[];for(t=0;12>t;t++)n=s([2e3,t]),i.push(this.monthsShort(n,"")),a.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(i.sort(e),a.sort(e),r.sort(e),t=0;12>t;t++)i[t]=V(i[t]),a[t]=V(a[t]),r[t]=V(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")$","i")}function it(e){var t,n=e._a;return n&&-2===u(e).overflow&&(t=n[Sa]<0||n[Sa]>11?Sa:n[va]<1||n[va]>F(n[ya],n[Sa])?va:n[wa]<0||n[wa]>24||24===n[wa]&&(0!==n[Ea]||0!==n[Da]||0!==n[Ca])?wa:n[Ea]<0||n[Ea]>59?Ea:n[Da]<0||n[Da]>59?Da:n[Ca]<0||n[Ca]>999?Ca:-1,u(e)._overflowDayOfYear&&(ya>t||t>va)&&(t=va),u(e)._overflowWeeks&&-1===t&&(t=za),u(e)._overflowWeekday&&-1===t&&(t=Oa),u(e).overflow=t),e}function at(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function rt(e,t){var n=!0;return o(function(){return n&&(at(e+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),n=!1),t.apply(this,arguments)},t)}function ot(e,t){Ga[e]||(at(t),Ga[e]=!0)}function st(e){var t,n,i,a,r,o,s=e._i,c=La.exec(s)||Ra.exec(s);if(c){for(u(e).iso=!0,t=0,n=xa.length;n>t;t++)if(xa[t][1].exec(c[1])){a=xa[t][0],i=xa[t][2]!==!1;break}if(null==a)return e._isValid=!1,void 0;if(c[3]){for(t=0,n=qa.length;n>t;t++)if(qa[t][1].exec(c[3])){r=(c[2]||" ")+qa[t][0];break}if(null==r)return e._isValid=!1,void 0}if(!i&&null!=r)return e._isValid=!1,void 0;if(c[4]){if(!Na.exec(c[4]))return e._isValid=!1,void 0;o="Z"}e._f=a+(r||"")+(o||""),yt(e)}else e._isValid=!1}function ct(t){var n=Ia.exec(t._i);return null!==n?(t._d=new Date(+n[1]),void 0):(st(t),t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t)),void 0)}function ut(e,t,n,i,a,r,o){var s=new Date(e,t,n,i,a,r,o);return 100>e&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function lt(e){var t=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ft(e){return ht(e)?366:365}function ht(e){return e%4===0&&e%100!==0||e%400===0}function dt(){return ht(this.year())}function mt(e,t,n){var i=7+t-n,a=(7+lt(e,0,i).getUTCDay()-t)%7;return-a+i-1}function At(e,t,n,i,a){var r,o,s=(7+n-i)%7,c=mt(e,i,a),u=1+7*(t-1)+s+c;return 0>=u?(r=e-1,o=ft(r)+u):u>ft(e)?(r=e+1,o=u-ft(e)):(r=e,o=u),{year:r,dayOfYear:o}}function pt(e,t,n){var i,a,r=mt(e.year(),t,n),o=Math.floor((e.dayOfYear()-r-1)/7)+1;return 1>o?(a=e.year()-1,i=o+gt(a,t,n)):o>gt(e.year(),t,n)?(i=o-gt(e.year(),t,n),a=e.year()+1):(a=e.year(),i=o),{week:i,year:a}}function gt(e,t,n){var i=mt(e,t,n),a=mt(e+1,t,n);return(ft(e)-i+a)/7}function _t(e,t,n){return null!=e?e:null!=t?t:n}function Mt(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function Tt(e){var t,n,i,a,r=[];if(!e._d){for(i=Mt(e),e._w&&null==e._a[va]&&null==e._a[Sa]&&bt(e),e._dayOfYear&&(a=_t(e._a[ya],i[ya]),e._dayOfYear>ft(a)&&(u(e)._overflowDayOfYear=!0),n=lt(a,0,e._dayOfYear),e._a[Sa]=n.getUTCMonth(),e._a[va]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=r[t]=i[t];for(;7>t;t++)e._a[t]=r[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[wa]&&0===e._a[Ea]&&0===e._a[Da]&&0===e._a[Ca]&&(e._nextDay=!0,e._a[wa]=0),e._d=(e._useUTC?lt:ut).apply(null,r),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[wa]=24)}}function bt(e){var t,n,i,a,r,o,s,c;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(r=1,o=4,n=_t(t.GG,e._a[ya],pt(Ot(),1,4).year),i=_t(t.W,1),a=_t(t.E,1),(1>a||a>7)&&(c=!0)):(r=e._locale._week.dow,o=e._locale._week.doy,n=_t(t.gg,e._a[ya],pt(Ot(),r,o).year),i=_t(t.w,1),null!=t.d?(a=t.d,(0>a||a>6)&&(c=!0)):null!=t.e?(a=t.e+r,(t.e<0||t.e>6)&&(c=!0)):a=r),1>i||i>gt(n,r,o)?u(e)._overflowWeeks=!0:null!=c?u(e)._overflowWeekday=!0:(s=At(n,i,a,r,o),e._a[ya]=s.year,e._dayOfYear=s.dayOfYear)
}function yt(t){if(t._f===e.ISO_8601)return st(t),void 0;t._a=[],u(t).empty=!0;var n,i,a,r,o,s=""+t._i,c=s.length,l=0;for(a=N(t._f,t._locale).match($i)||[],n=0;n<a.length;n++)r=a[n],i=(s.match(q(r,t))||[])[0],i&&(o=s.substr(0,s.indexOf(i)),o.length>0&&u(t).unusedInput.push(o),s=s.slice(s.indexOf(i)+i.length),l+=i.length),na[r]?(i?u(t).empty=!1:u(t).unusedTokens.push(r),j(r,i,t)):t._strict&&!i&&u(t).unusedTokens.push(r);u(t).charsLeftOver=c-l,s.length>0&&u(t).unusedInput.push(s),u(t).bigHour===!0&&t._a[wa]<=12&&t._a[wa]>0&&(u(t).bigHour=void 0),t._a[wa]=St(t._locale,t._a[wa],t._meridiem),Tt(t),it(t)}function St(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(i=e.isPM(n),i&&12>t&&(t+=12),i||12!==t||(t=0),t):t}function vt(e){var t,n,i,a,r;if(0===e._f.length)return u(e).invalidFormat=!0,e._d=new Date(0/0),void 0;for(a=0;a<e._f.length;a++)r=0,t=d({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],yt(t),l(t)&&(r+=u(t).charsLeftOver,r+=10*u(t).unusedTokens.length,u(t).score=r,(null==i||i>r)&&(i=r,n=t));o(e,n||t)}function wt(e){if(!e._d){var t=C(e._i);e._a=a([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),Tt(e)}}function Et(e){var t=new m(it(Dt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function Dt(e){var t=e._i,a=e._f;return e._locale=e._locale||w(e._l),null===t||void 0===a&&""===t?f({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),A(t)?new m(it(t)):(n(a)?vt(e):a?yt(e):i(t)?e._d=t:Ct(e),l(e)||(e._d=null),e))}function Ct(t){var r=t._i;void 0===r?t._d=new Date(e.now()):i(r)?t._d=new Date(+r):"string"==typeof r?ct(t):n(r)?(t._a=a(r.slice(0),function(e){return parseInt(e,10)}),Tt(t)):"object"==typeof r?wt(t):"number"==typeof r?t._d=new Date(r):e.createFromInputFallback(t)}function zt(e,t,n,i,a){var r={};return"boolean"==typeof n&&(i=n,n=void 0),r._isAMomentObject=!0,r._useUTC=r._isUTC=a,r._l=n,r._i=e,r._f=t,r._strict=i,Et(r)}function Ot(e,t,n,i){return zt(e,t,n,i,!1)}function kt(e,t){var i,a;if(1===t.length&&n(t[0])&&(t=t[0]),!t.length)return Ot();for(i=t[0],a=1;a<t.length;++a)(!t[a].isValid()||t[a][e](i))&&(i=t[a]);return i}function Pt(){var e=[].slice.call(arguments,0);return kt("isBefore",e)}function Wt(){var e=[].slice.call(arguments,0);return kt("isAfter",e)}function Yt(e){var t=C(e),n=t.year||0,i=t.quarter||0,a=t.month||0,r=t.week||0,o=t.day||0,s=t.hour||0,c=t.minute||0,u=t.second||0,l=t.millisecond||0;this._milliseconds=+l+1e3*u+6e4*c+36e5*s,this._days=+o+7*r,this._months=+a+3*i+12*n,this._data={},this._locale=w(),this._bubble()}function Bt(e){return e instanceof Yt}function Gt(e,t){B(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+Y(~~(e/60),2)+t+Y(~~e%60,2)})}function Lt(e,t){var n=(t||"").match(e)||[],i=n[n.length-1]||[],a=(i+"").match(Fa)||["-",0,0],r=+(60*a[1])+g(a[2]);return"+"===a[0]?r:-r}function Rt(t,n){var a,r;return n._isUTC?(a=n.clone(),r=(A(t)||i(t)?+t:+Ot(t))-+a,a._d.setTime(+a._d+r),e.updateOffset(a,!1),a):Ot(t).local()}function Nt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function xt(t,n){var i,a=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Lt(ga,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&n&&(i=Nt(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),a!==t&&(!n||this._changeInProgress?nn(this,Zt(t-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?a:Nt(this):null!=t?this:0/0}function qt(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function It(e){return this.utcOffset(0,e)}function Vt(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Nt(this),"m")),this}function Ht(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Lt(pa,this._i)),this}function Ut(e){return this.isValid()?(e=e?Ot(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function jt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ft(){if(!h(this._isDSTShifted))return this._isDSTShifted;var e={};if(d(e,this),e=Dt(e),e._a){var t=e._isUTC?s(e._a):Ot(e._a);this._isDSTShifted=this.isValid()&&_(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Kt(){return this.isValid()?!this._isUTC:!1}function Xt(){return this.isValid()?this._isUTC:!1}function Jt(){return this.isValid()?this._isUTC&&0===this._offset:!1}function Zt(e,t){var n,i,a,o=e,s=null;return Bt(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(o={},t?o[t]=e:o.milliseconds=e):(s=Ka.exec(e))?(n="-"===s[1]?-1:1,o={y:0,d:g(s[va])*n,h:g(s[wa])*n,m:g(s[Ea])*n,s:g(s[Da])*n,ms:g(s[Ca])*n}):(s=Xa.exec(e))?(n="-"===s[1]?-1:1,o={y:Qt(s[2],n),M:Qt(s[3],n),d:Qt(s[4],n),h:Qt(s[5],n),m:Qt(s[6],n),s:Qt(s[7],n),w:Qt(s[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(a=en(Ot(o.from),Ot(o.to)),o={},o.ms=a.milliseconds,o.M=a.months),i=new Yt(o),Bt(e)&&r(e,"_locale")&&(i._locale=e._locale),i}function Qt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function en(e,t){var n;return e.isValid()&&t.isValid()?(t=Rt(t,e),e.isBefore(t)?n=$t(e,t):(n=$t(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function tn(e,t){return function(n,i){var a,r;return null===i||isNaN(+i)||(ot(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period)."),r=n,n=i,i=r),n="string"==typeof n?+n:n,a=Zt(n,i),nn(this,a,e),this}}function nn(t,n,i,a){var r=n._milliseconds,o=n._days,s=n._months;t.isValid()&&(a=null==a?!0:a,r&&t._d.setTime(+t._d+r*i),o&&P(t,"Date",k(t,"Date")+o*i),s&&Z(t,k(t,"Month")+s*i),a&&e.updateOffset(t,o||s))}function an(e,t){var n=e||Ot(),i=Rt(n,this).startOf("day"),a=this.diff(i,"days",!0),r=-6>a?"sameElse":-1>a?"lastWeek":0>a?"lastDay":1>a?"sameDay":2>a?"nextDay":7>a?"nextWeek":"sameElse",o=t&&(z(t[r])?t[r]():t[r]);return this.format(o||this.localeData().calendar(r,this,Ot(n)))}function rn(){return new m(this)}function on(e,t){var n=A(e)?e:Ot(e);return this.isValid()&&n.isValid()?(t=D(h(t)?"millisecond":t),"millisecond"===t?+this>+n:+n<+this.clone().startOf(t)):!1}function sn(e,t){var n=A(e)?e:Ot(e);return this.isValid()&&n.isValid()?(t=D(h(t)?"millisecond":t),"millisecond"===t?+n>+this:+this.clone().endOf(t)<+n):!1}function cn(e,t,n){return this.isAfter(e,n)&&this.isBefore(t,n)}function un(e,t){var n,i=A(e)?e:Ot(e);return this.isValid()&&i.isValid()?(t=D(t||"millisecond"),"millisecond"===t?+this===+i:(n=+i,+this.clone().startOf(t)<=n&&n<=+this.clone().endOf(t))):!1}function ln(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function fn(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function hn(e,t,n){var i,a,r,o;return this.isValid()?(i=Rt(e,this),i.isValid()?(a=6e4*(i.utcOffset()-this.utcOffset()),t=D(t),"year"===t||"month"===t||"quarter"===t?(o=dn(this,i),"quarter"===t?o/=3:"year"===t&&(o/=12)):(r=this-i,o="second"===t?r/1e3:"minute"===t?r/6e4:"hour"===t?r/36e5:"day"===t?(r-a)/864e5:"week"===t?(r-a)/6048e5:r),n?o:p(o)):0/0):0/0}function dn(e,t){var n,i,a=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(a,"months");return 0>t-r?(n=e.clone().add(a-1,"months"),i=(t-r)/(r-n)):(n=e.clone().add(a+1,"months"),i=(t-r)/(n-r)),-(a+i)}function mn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function An(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?z(Date.prototype.toISOString)?this.toDate().toISOString():R(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):R(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function pn(t){var n=R(this,t||e.defaultFormat);return this.localeData().postformat(n)}function gn(e,t){return this.isValid()&&(A(e)&&e.isValid()||Ot(e).isValid())?Zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function _n(e){return this.from(Ot(),e)}function Mn(e,t){return this.isValid()&&(A(e)&&e.isValid()||Ot(e).isValid())?Zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function Tn(e){return this.to(Ot(),e)}function bn(e){var t;return void 0===e?this._locale._abbr:(t=w(e),null!=t&&(this._locale=t),this)}function yn(){return this._locale}function Sn(e){switch(e=D(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function vn(e){return e=D(e),void 0===e||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")}function wn(){return+this._d-6e4*(this._offset||0)}function En(){return Math.floor(+this/1e3)}function Dn(){return this._offset?new Date(+this):this._d}function Cn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function zn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function On(){return this.isValid()?this.toISOString():"null"}function kn(){return l(this)}function Pn(){return o({},u(this))}function Wn(){return u(this).overflow}function Yn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Bn(e,t){B(0,[e,e.length],0,t)}function Gn(e){return xn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Ln(e){return xn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Rn(){return gt(this.year(),1,4)}function Nn(){var e=this.localeData()._week;return gt(this.year(),e.dow,e.doy)}function xn(e,t,n,i,a){var r;return null==e?pt(this,i,a).year:(r=gt(e,i,a),t>r&&(t=r),qn.call(this,e,t,n,i,a))}function qn(e,t,n,i,a){var r=At(e,t,n,i,a),o=lt(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function In(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Vn(e){return pt(e,this._week.dow,this._week.doy).week}function Hn(){return this._week.dow}function Un(){return this._week.doy}function jn(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Fn(e){var t=pt(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function Kn(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Xn(e,t){return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}function Jn(e){return this._weekdaysShort[e.day()]}function Zn(e){return this._weekdaysMin[e.day()]}function Qn(e,t,n){var i,a,r;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;7>i;i++){if(a=Ot([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(a,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(a,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(a,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(r="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[i]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function $n(e){if(!this.isValid())return null!=e?this:0/0;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Kn(e,this.localeData()),this.add(e-t,"d")):t}function ei(e){if(!this.isValid())return null!=e?this:0/0;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function ti(e){return this.isValid()?null==e?this.day()||7:this.day(this.day()%7?e:e-7):null!=e?this:0/0}function ni(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function ii(){return this.hours()%12||12}function ai(e,t){B(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function ri(e,t){return t._meridiemParse}function oi(e){return"p"===(e+"").toLowerCase().charAt(0)}function si(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function ci(e,t){t[Ca]=g(1e3*("0."+e))}function ui(){return this._isUTC?"UTC":""}function li(){return this._isUTC?"Coordinated Universal Time":""}function fi(e){return Ot(1e3*e)}function hi(){return Ot.apply(null,arguments).parseZone()}function di(e,t,n){var i=this._calendar[e];return z(i)?i.call(t,n):i}function mi(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function Ai(){return this._invalidDate}function pi(e){return this._ordinal.replace("%d",e)}function gi(e){return e}function _i(e,t,n,i){var a=this._relativeTime[n];return z(a)?a(e,t,n,i):a.replace(/%d/i,e)}function Mi(e,t){var n=this._relativeTime[e>0?"future":"past"];return z(n)?n(t):n.replace(/%s/i,t)}function Ti(e){var t,n;for(n in e)t=e[n],z(t)?this[n]=t:this["_"+n]=t;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function bi(e,t,n,i){var a=w(),r=s().set(i,t);return a[n](r,e)}function yi(e,t,n,i,a){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return bi(e,t,n,a);var r,o=[];for(r=0;i>r;r++)o[r]=bi(e,r,n,a);return o}function Si(e,t){return yi(e,t,"months",12,"month")}function vi(e,t){return yi(e,t,"monthsShort",12,"month")}function wi(e,t){return yi(e,t,"weekdays",7,"day")}function Ei(e,t){return yi(e,t,"weekdaysShort",7,"day")}function Di(e,t){return yi(e,t,"weekdaysMin",7,"day")}function Ci(){var e=this._data;return this._milliseconds=Mr(this._milliseconds),this._days=Mr(this._days),this._months=Mr(this._months),e.milliseconds=Mr(e.milliseconds),e.seconds=Mr(e.seconds),e.minutes=Mr(e.minutes),e.hours=Mr(e.hours),e.months=Mr(e.months),e.years=Mr(e.years),this}function zi(e,t,n,i){var a=Zt(t,n);return e._milliseconds+=i*a._milliseconds,e._days+=i*a._days,e._months+=i*a._months,e._bubble()}function Oi(e,t){return zi(this,e,t,1)}function ki(e,t){return zi(this,e,t,-1)}function Pi(e){return 0>e?Math.floor(e):Math.ceil(e)}function Wi(){var e,t,n,i,a,r=this._milliseconds,o=this._days,s=this._months,c=this._data;return r>=0&&o>=0&&s>=0||0>=r&&0>=o&&0>=s||(r+=864e5*Pi(Bi(s)+o),o=0,s=0),c.milliseconds=r%1e3,e=p(r/1e3),c.seconds=e%60,t=p(e/60),c.minutes=t%60,n=p(t/60),c.hours=n%24,o+=p(n/24),a=p(Yi(o)),s+=a,o-=Pi(Bi(a)),i=p(s/12),s%=12,c.days=o,c.months=s,c.years=i,this}function Yi(e){return 4800*e/146097}function Bi(e){return 146097*e/4800}function Gi(e){var t,n,i=this._milliseconds;if(e=D(e),"month"===e||"year"===e)return t=this._days+i/864e5,n=this._months+Yi(t),"month"===e?n:n/12;switch(t=this._days+Math.round(Bi(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function Li(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*g(this._months/12)}function Ri(e){return function(){return this.as(e)}}function Ni(e){return e=D(e),this[e+"s"]()}function xi(e){return function(){return this._data[e]}}function qi(){return p(this.days()/7)}function Ii(e,t,n,i,a){return a.relativeTime(t||1,!!n,e,i)}function Vi(e,t,n){var i=Zt(e).abs(),a=Br(i.as("s")),r=Br(i.as("m")),o=Br(i.as("h")),s=Br(i.as("d")),c=Br(i.as("M")),u=Br(i.as("y")),l=a<Gr.s&&["s",a]||1>=r&&["m"]||r<Gr.m&&["mm",r]||1>=o&&["h"]||o<Gr.h&&["hh",o]||1>=s&&["d"]||s<Gr.d&&["dd",s]||1>=c&&["M"]||c<Gr.M&&["MM",c]||1>=u&&["y"]||["yy",u];return l[2]=t,l[3]=+e>0,l[4]=n,Ii.apply(null,l)}function Hi(e,t){return void 0===Gr[e]?!1:void 0===t?Gr[e]:(Gr[e]=t,!0)}function Ui(e){var t=this.localeData(),n=Vi(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function ji(){var e,t,n,i=Lr(this._milliseconds)/1e3,a=Lr(this._days),r=Lr(this._months);e=p(i/60),t=p(e/60),i%=60,e%=60,n=p(r/12),r%=12;var o=n,s=r,c=a,u=t,l=e,f=i,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(o?o+"Y":"")+(s?s+"M":"")+(c?c+"D":"")+(u||l||f?"T":"")+(u?u+"H":"")+(l?l+"M":"")+(f?f+"S":""):"P0D"}var Fi,Ki,Xi=e.momentProperties=[],Ji=!1,Zi={},Qi={},$i=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ea=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,ta={},na={},ia=/\d/,aa=/\d\d/,ra=/\d{3}/,oa=/\d{4}/,sa=/[+-]?\d{6}/,ca=/\d\d?/,ua=/\d\d\d\d?/,la=/\d\d\d\d\d\d?/,fa=/\d{1,3}/,ha=/\d{1,4}/,da=/[+-]?\d{1,6}/,ma=/\d+/,Aa=/[+-]?\d+/,pa=/Z|[+-]\d\d:?\d\d/gi,ga=/Z|[+-]\d\d(?::?\d\d)?/gi,_a=/[+-]?\d+(\.\d{1,3})?/,Ma=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ta={},ba={},ya=0,Sa=1,va=2,wa=3,Ea=4,Da=5,Ca=6,za=7,Oa=8;B("M",["MM",2],"Mo",function(){return this.month()+1}),B("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),B("MMMM",0,0,function(e){return this.localeData().months(this,e)}),E("month","M"),x("M",ca),x("MM",ca,aa),x("MMM",function(e,t){return t.monthsShortRegex(e)}),x("MMMM",function(e,t){return t.monthsRegex(e)}),H(["M","MM"],function(e,t){t[Sa]=g(e)-1}),H(["MMM","MMMM"],function(e,t,n,i){var a=n._locale.monthsParse(e,i,n._strict);null!=a?t[Sa]=a:u(n).invalidMonth=e});var ka=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Pa="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Wa="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Ya=Ma,Ba=Ma,Ga={};e.suppressDeprecationWarnings=!1;var La=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Ra=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Na=/Z|[+-]\d\d(?::?\d\d)?/,xa=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],qa=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ia=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=rt("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),B("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),B(0,["YY",2],0,function(){return this.year()%100}),B(0,["YYYY",4],0,"year"),B(0,["YYYYY",5],0,"year"),B(0,["YYYYYY",6,!0],0,"year"),E("year","y"),x("Y",Aa),x("YY",ca,aa),x("YYYY",ha,oa),x("YYYYY",da,sa),x("YYYYYY",da,sa),H(["YYYYY","YYYYYY"],ya),H("YYYY",function(t,n){n[ya]=2===t.length?e.parseTwoDigitYear(t):g(t)}),H("YY",function(t,n){n[ya]=e.parseTwoDigitYear(t)}),H("Y",function(e,t){t[ya]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return g(e)+(g(e)>68?1900:2e3)};var Va=O("FullYear",!1);e.ISO_8601=function(){};var Ha=rt("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:f()}),Ua=rt("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:f()}),ja=function(){return Date.now?Date.now():+new Date};Gt("Z",":"),Gt("ZZ",""),x("Z",ga),x("ZZ",ga),H(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Lt(ga,e)});var Fa=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Ka=/(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Xa=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Zt.fn=Yt.prototype;var Ja=tn(1,"add"),Za=tn(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Qa=rt("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});B(0,["gg",2],0,function(){return this.weekYear()%100}),B(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Bn("gggg","weekYear"),Bn("ggggg","weekYear"),Bn("GGGG","isoWeekYear"),Bn("GGGGG","isoWeekYear"),E("weekYear","gg"),E("isoWeekYear","GG"),x("G",Aa),x("g",Aa),x("GG",ca,aa),x("gg",ca,aa),x("GGGG",ha,oa),x("gggg",ha,oa),x("GGGGG",da,sa),x("ggggg",da,sa),U(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=g(e)}),U(["gg","GG"],function(t,n,i,a){n[a]=e.parseTwoDigitYear(t)}),B("Q",0,"Qo","quarter"),E("quarter","Q"),x("Q",ia),H("Q",function(e,t){t[Sa]=3*(g(e)-1)}),B("w",["ww",2],"wo","week"),B("W",["WW",2],"Wo","isoWeek"),E("week","w"),E("isoWeek","W"),x("w",ca),x("ww",ca,aa),x("W",ca),x("WW",ca,aa),U(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=g(e)});var $a={dow:0,doy:6};B("D",["DD",2],"Do","date"),E("date","D"),x("D",ca),x("DD",ca,aa),x("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),H(["D","DD"],va),H("Do",function(e,t){t[va]=g(e.match(ca)[0],10)});var er=O("Date",!0);B("d",0,"do","day"),B("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),B("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),B("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),B("e",0,0,"weekday"),B("E",0,0,"isoWeekday"),E("day","d"),E("weekday","e"),E("isoWeekday","E"),x("d",ca),x("e",ca),x("E",ca),x("dd",Ma),x("ddd",Ma),x("dddd",Ma),U(["dd","ddd","dddd"],function(e,t,n,i){var a=n._locale.weekdaysParse(e,i,n._strict);null!=a?t.d=a:u(n).invalidWeekday=e}),U(["d","e","E"],function(e,t,n,i){t[i]=g(e)});var tr="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),nr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ir="Su_Mo_Tu_We_Th_Fr_Sa".split("_");B("DDD",["DDDD",3],"DDDo","dayOfYear"),E("dayOfYear","DDD"),x("DDD",fa),x("DDDD",ra),H(["DDD","DDDD"],function(e,t,n){n._dayOfYear=g(e)}),B("H",["HH",2],0,"hour"),B("h",["hh",2],0,ii),B("hmm",0,0,function(){return""+ii.apply(this)+Y(this.minutes(),2)}),B("hmmss",0,0,function(){return""+ii.apply(this)+Y(this.minutes(),2)+Y(this.seconds(),2)}),B("Hmm",0,0,function(){return""+this.hours()+Y(this.minutes(),2)}),B("Hmmss",0,0,function(){return""+this.hours()+Y(this.minutes(),2)+Y(this.seconds(),2)}),ai("a",!0),ai("A",!1),E("hour","h"),x("a",ri),x("A",ri),x("H",ca),x("h",ca),x("HH",ca,aa),x("hh",ca,aa),x("hmm",ua),x("hmmss",la),x("Hmm",ua),x("Hmmss",la),H(["H","HH"],wa),H(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),H(["h","hh"],function(e,t,n){t[wa]=g(e),u(n).bigHour=!0}),H("hmm",function(e,t,n){var i=e.length-2;t[wa]=g(e.substr(0,i)),t[Ea]=g(e.substr(i)),u(n).bigHour=!0}),H("hmmss",function(e,t,n){var i=e.length-4,a=e.length-2;t[wa]=g(e.substr(0,i)),t[Ea]=g(e.substr(i,2)),t[Da]=g(e.substr(a)),u(n).bigHour=!0}),H("Hmm",function(e,t){var n=e.length-2;t[wa]=g(e.substr(0,n)),t[Ea]=g(e.substr(n))}),H("Hmmss",function(e,t){var n=e.length-4,i=e.length-2;t[wa]=g(e.substr(0,n)),t[Ea]=g(e.substr(n,2)),t[Da]=g(e.substr(i))});var ar=/[ap]\.?m?\.?/i,rr=O("Hours",!0);B("m",["mm",2],0,"minute"),E("minute","m"),x("m",ca),x("mm",ca,aa),H(["m","mm"],Ea);var or=O("Minutes",!1);B("s",["ss",2],0,"second"),E("second","s"),x("s",ca),x("ss",ca,aa),H(["s","ss"],Da);var sr=O("Seconds",!1);B("S",0,0,function(){return~~(this.millisecond()/100)}),B(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),B(0,["SSS",3],0,"millisecond"),B(0,["SSSS",4],0,function(){return 10*this.millisecond()}),B(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),B(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),B(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),B(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),B(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),E("millisecond","ms"),x("S",fa,ia),x("SS",fa,aa),x("SSS",fa,ra);var cr;for(cr="SSSS";cr.length<=9;cr+="S")x(cr,ma);for(cr="S";cr.length<=9;cr+="S")H(cr,ci);var ur=O("Milliseconds",!1);B("z",0,0,"zoneAbbr"),B("zz",0,0,"zoneName");var lr=m.prototype;lr.add=Ja,lr.calendar=an,lr.clone=rn,lr.diff=hn,lr.endOf=vn,lr.format=pn,lr.from=gn,lr.fromNow=_n,lr.to=Mn,lr.toNow=Tn,lr.get=W,lr.invalidAt=Wn,lr.isAfter=on,lr.isBefore=sn,lr.isBetween=cn,lr.isSame=un,lr.isSameOrAfter=ln,lr.isSameOrBefore=fn,lr.isValid=kn,lr.lang=Qa,lr.locale=bn,lr.localeData=yn,lr.max=Ua,lr.min=Ha,lr.parsingFlags=Pn,lr.set=W,lr.startOf=Sn,lr.subtract=Za,lr.toArray=Cn,lr.toObject=zn,lr.toDate=Dn,lr.toISOString=An,lr.toJSON=On,lr.toString=mn,lr.unix=En,lr.valueOf=wn,lr.creationData=Yn,lr.year=Va,lr.isLeapYear=dt,lr.weekYear=Gn,lr.isoWeekYear=Ln,lr.quarter=lr.quarters=In,lr.month=Q,lr.daysInMonth=$,lr.week=lr.weeks=jn,lr.isoWeek=lr.isoWeeks=Fn,lr.weeksInYear=Nn,lr.isoWeeksInYear=Rn,lr.date=er,lr.day=lr.days=$n,lr.weekday=ei,lr.isoWeekday=ti,lr.dayOfYear=ni,lr.hour=lr.hours=rr,lr.minute=lr.minutes=or,lr.second=lr.seconds=sr,lr.millisecond=lr.milliseconds=ur,lr.utcOffset=xt,lr.utc=It,lr.local=Vt,lr.parseZone=Ht,lr.hasAlignedHourOffset=Ut,lr.isDST=jt,lr.isDSTShifted=Ft,lr.isLocal=Kt,lr.isUtcOffset=Xt,lr.isUtc=Jt,lr.isUTC=Jt,lr.zoneAbbr=ui,lr.zoneName=li,lr.dates=rt("dates accessor is deprecated. Use date instead.",er),lr.months=rt("months accessor is deprecated. Use month instead",Q),lr.years=rt("years accessor is deprecated. Use year instead",Va),lr.zone=rt("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",qt);var fr=lr,hr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},dr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},mr="Invalid date",Ar="%d",pr=/\d{1,2}/,gr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},_r=M.prototype;_r._calendar=hr,_r.calendar=di,_r._longDateFormat=dr,_r.longDateFormat=mi,_r._invalidDate=mr,_r.invalidDate=Ai,_r._ordinal=Ar,_r.ordinal=pi,_r._ordinalParse=pr,_r.preparse=gi,_r.postformat=gi,_r._relativeTime=gr,_r.relativeTime=_i,_r.pastFuture=Mi,_r.set=Ti,_r.months=K,_r._months=Pa,_r.monthsShort=X,_r._monthsShort=Wa,_r.monthsParse=J,_r._monthsRegex=Ba,_r.monthsRegex=tt,_r._monthsShortRegex=Ya,_r.monthsShortRegex=et,_r.week=Vn,_r._week=$a,_r.firstDayOfYear=Un,_r.firstDayOfWeek=Hn,_r.weekdays=Xn,_r._weekdays=tr,_r.weekdaysMin=Zn,_r._weekdaysMin=ir,_r.weekdaysShort=Jn,_r._weekdaysShort=nr,_r.weekdaysParse=Qn,_r.isPM=oi,_r._meridiemParse=ar,_r.meridiem=si,S("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===g(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=rt("moment.lang is deprecated. Use moment.locale instead.",S),e.langData=rt("moment.langData is deprecated. Use moment.localeData instead.",w);var Mr=Math.abs,Tr=Ri("ms"),br=Ri("s"),yr=Ri("m"),Sr=Ri("h"),vr=Ri("d"),wr=Ri("w"),Er=Ri("M"),Dr=Ri("y"),Cr=xi("milliseconds"),zr=xi("seconds"),Or=xi("minutes"),kr=xi("hours"),Pr=xi("days"),Wr=xi("months"),Yr=xi("years"),Br=Math.round,Gr={s:45,m:45,h:22,d:26,M:11},Lr=Math.abs,Rr=Yt.prototype;Rr.abs=Ci,Rr.add=Oi,Rr.subtract=ki,Rr.as=Gi,Rr.asMilliseconds=Tr,Rr.asSeconds=br,Rr.asMinutes=yr,Rr.asHours=Sr,Rr.asDays=vr,Rr.asWeeks=wr,Rr.asMonths=Er,Rr.asYears=Dr,Rr.valueOf=Li,Rr._bubble=Wi,Rr.get=Ni,Rr.milliseconds=Cr,Rr.seconds=zr,Rr.minutes=Or,Rr.hours=kr,Rr.days=Pr,Rr.weeks=qi,Rr.months=Wr,Rr.years=Yr,Rr.humanize=Ui,Rr.toISOString=ji,Rr.toString=ji,Rr.toJSON=ji,Rr.locale=bn,Rr.localeData=yn,Rr.toIsoString=rt("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ji),Rr.lang=Qa,B("X",0,0,"unix"),B("x",0,0,"valueOf"),x("x",Aa),x("X",_a),H("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),H("x",function(e,t,n){n._d=new Date(g(e))}),e.version="2.11.1",t(Ot),e.fn=fr,e.min=Pt,e.max=Wt,e.now=ja,e.utc=s,e.unix=fi,e.months=Si,e.isDate=i,e.locale=S,e.invalid=f,e.duration=Zt,e.isMoment=A,e.weekdays=wi,e.parseZone=hi,e.localeData=w,e.isDuration=Bt,e.monthsShort=vi,e.weekdaysMin=Di,e.defineLocale=v,e.weekdaysShort=Ei,e.normalizeUnits=D,e.relativeTimeThreshold=Hi,e.prototype=fr;var Nr=e;return Nr}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["moment"],t):"object"==typeof module&&module.exports?module.exports=t(require("moment")):t(e.moment)}(this,function(e){"use strict";function t(e){return e>96?e-87:e>64?e-29:e-48}function n(e){var n,i=0,a=e.split("."),r=a[0],o=a[1]||"",s=1,c=0,u=1;for(45===e.charCodeAt(0)&&(i=1,u=-1),i;i<r.length;i++)n=t(r.charCodeAt(i)),c=60*c+n;for(i=0;i<o.length;i++)s/=60,n=t(o.charCodeAt(i)),c+=n*s;return c*u}function i(e){for(var t=0;t<e.length;t++)e[t]=n(e[t])}function a(e,t){for(var n=0;t>n;n++)e[n]=Math.round((e[n-1]||0)+6e4*e[n]);e[t-1]=1/0}function r(e,t){var n,i=[];for(n=0;n<t.length;n++)i[n]=e[t[n]];return i}function o(e){var t=e.split("|"),n=t[2].split(" "),o=t[3].split(""),s=t[4].split(" ");return i(n),i(o),i(s),a(s,o.length),{name:t[0],abbrs:r(t[1].split(" "),o),offsets:r(n,o),untils:s,population:0|t[5]}}function s(e){e&&this._set(o(e))}function c(e){var t=e.toTimeString(),n=t.match(/\(.+\)/);n=n&&n[0]?n[0].match(/[A-Z]/g).join(""):t.match(/[A-Z]{3,5}/g)[0],"GMT"===n&&(n=void 0),this.at=+e,this.abbr=n,this.offset=e.getTimezoneOffset()}function u(e){this.zone=e,this.offsetScore=0,this.abbrScore=0}function l(e,t){for(var n,i;i=6e4*((t.at-e.at)/12e4|0);)n=new c(new Date(e.at+i)),n.offset===e.offset?e=n:t=n;return e}function f(){var e,t,n,i=(new Date).getFullYear()-2,a=new c(new Date(i,0,1)),r=[a];for(n=1;48>n;n++)t=new c(new Date(i,n,1)),t.offset!==a.offset&&(e=l(a,t),r.push(e),r.push(new c(new Date(e.at+6e4)))),a=t;for(n=0;4>n;n++)r.push(new c(new Date(i+n,0,1))),r.push(new c(new Date(i+n,6,1)));return r}function h(e,t){return e.offsetScore!==t.offsetScore?e.offsetScore-t.offsetScore:e.abbrScore!==t.abbrScore?e.abbrScore-t.abbrScore:t.zone.population-e.zone.population}function d(e,t){var n,a;for(i(t),n=0;n<t.length;n++)a=t[n],Y[a]=Y[a]||{},Y[a][e]=!0}function m(e){var t,n,i,a=e.length,r={},o=[];for(t=0;a>t;t++){i=Y[e[t].offset]||{};for(n in i)i.hasOwnProperty(n)&&(r[n]=!0)}for(t in r)r.hasOwnProperty(t)&&o.push(W[t]);return o}function A(){var e,t,n,i=f(),a=i.length,r=m(i),o=[];for(t=0;t<r.length;t++){for(e=new u(M(r[t]),a),n=0;a>n;n++)e.scoreOffsetAt(i[n]);o.push(e)}return o.sort(h),o.length>0?o[0].zone.name:void 0}function p(e){return(!z||e)&&(z=A()),z}function g(e){return(e||"").toLowerCase().replace(/\//g,"_")}function _(e){var t,n,i,a;for("string"==typeof e&&(e=[e]),t=0;t<e.length;t++)i=e[t].split("|"),n=i[0],a=g(n),k[a]=e[t],W[a]=n,i[5]&&d(a,i[2].split(" "))
}function M(e,t){e=g(e);var n,i=k[e];return i instanceof s?i:"string"==typeof i?(i=new s(i),k[e]=i,i):P[e]&&t!==M&&(n=M(P[e],M))?(i=k[e]=new s,i._set(n),i.name=W[e],i):null}function T(){var e,t=[];for(e in W)W.hasOwnProperty(e)&&(k[e]||k[P[e]])&&W[e]&&t.push(W[e]);return t.sort()}function b(e){var t,n,i,a;for("string"==typeof e&&(e=[e]),t=0;t<e.length;t++)n=e[t].split("|"),i=g(n[0]),a=g(n[1]),P[i]=a,W[i]=n[0],P[a]=i,W[a]=n[1]}function y(e){_(e.zones),b(e.links),E.dataVersion=e.version}function S(e){return S.didShowError||(S.didShowError=!0,w("moment.tz.zoneExists('"+e+"') has been deprecated in favor of !moment.tz.zone('"+e+"')")),!!M(e)}function v(e){return!(!e._a||void 0!==e._tzm)}function w(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}function E(t){var n=Array.prototype.slice.call(arguments,0,-1),i=arguments[arguments.length-1],a=M(i),r=e.utc.apply(null,n);return a&&!e.isMoment(t)&&v(r)&&r.add(a.parse(r),"minutes"),r.tz(i),r}function D(e){return function(){return this._z?this._z.abbr(this):e.call(this)}}function C(e){return function(){return this._z=null,e.apply(this,arguments)}}if(void 0!==e.tz)return w("Moment Timezone "+e.tz.version+" was already loaded "+(e.tz.dataVersion?"with data from ":"without any data")+e.tz.dataVersion),e;var z,O="0.5.0",k={},P={},W={},Y={},B=e.version.split("."),G=+B[0],L=+B[1];(2>G||2===G&&6>L)&&w("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+e.version+". See momentjs.com"),s.prototype={_set:function(e){this.name=e.name,this.abbrs=e.abbrs,this.untils=e.untils,this.offsets=e.offsets,this.population=e.population},_index:function(e){var t,n=+e,i=this.untils;for(t=0;t<i.length;t++)if(n<i[t])return t},parse:function(e){var t,n,i,a,r=+e,o=this.offsets,s=this.untils,c=s.length-1;for(a=0;c>a;a++)if(t=o[a],n=o[a+1],i=o[a?a-1:a],n>t&&E.moveAmbiguousForward?t=n:t>i&&E.moveInvalidForward&&(t=i),r<s[a]-6e4*t)return o[a];return o[c]},abbr:function(e){return this.abbrs[this._index(e)]},offset:function(e){return this.offsets[this._index(e)]}},u.prototype.scoreOffsetAt=function(e){this.offsetScore+=Math.abs(this.zone.offset(e.at)-e.offset),this.zone.abbr(e.at).match(/[A-Z]/g).join("")!==e.abbr&&this.abbrScore++},E.version=O,E.dataVersion="",E._zones=k,E._links=P,E._names=W,E.add=_,E.link=b,E.load=y,E.zone=M,E.zoneExists=S,E.guess=p,E.names=T,E.Zone=s,E.unpack=o,E.unpackBase60=n,E.needsOffset=v,E.moveInvalidForward=!0,E.moveAmbiguousForward=!1;var R=e.fn;e.tz=E,e.defaultZone=null,e.updateOffset=function(t,n){var i,a=e.defaultZone;void 0===t._z&&(a&&v(t)&&!t._isUTC&&(t._d=e.utc(t._a)._d,t.utc().add(a.parse(t),"minutes")),t._z=a),t._z&&(i=t._z.offset(t),Math.abs(i)<16&&(i/=60),void 0!==t.utcOffset?t.utcOffset(-i,n):t.zone(i,n))},R.tz=function(t){return t?(this._z=M(t),this._z?e.updateOffset(this):w("Moment Timezone has no data for "+t+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},R.zoneName=D(R.zoneName),R.zoneAbbr=D(R.zoneAbbr),R.utc=C(R.utc),e.tz.setDefault=function(t){return(2>G||2===G&&9>L)&&w("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+e.version+"."),e.defaultZone=t?M(t):null,e};var N=e.momentProperties;return"[object Array]"===Object.prototype.toString.call(N)?(N.push("_z"),N.push("_a")):N&&(N._z=null),y({version:"2015g",zones:["Africa/Abidjan|GMT|0|0||48e5","Africa/Khartoum|EAT|-30|0||51e5","Africa/Algiers|CET|-10|0||26e5","Africa/Lagos|WAT|-10|0||17e6","Africa/Maputo|CAT|-20|0||26e5","Africa/Cairo|EET EEST|-20 -30|010101010|1Cby0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6","Africa/Casablanca|WET WEST|0 -10|01010101010101010101010101010101010101010|1Cco0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0|32e5","Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6","Africa/Johannesburg|SAST|-20|0||84e5","Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00|11e5","Africa/Windhoek|WAST WAT|-20 -10|01010101010101010101010|1C1c0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0|32e4","America/Adak|HST HDT|a0 90|01010101010101010101010|1BR00 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326","America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1BQX0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4","America/Santo_Domingo|AST|40|0||29e5","America/Araguaina|BRT BRST|30 20|010|1IdD0 Lz0|14e4","America/Argentina/Buenos_Aires|ART|30|0|","America/Asuncion|PYST PYT|30 40|01010101010101010101010|1C430 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5","America/Panama|EST|50|0||15e5","America/Bahia|BRT BRST|30 20|010|1FJf0 Rb0|27e5","America/Bahia_Banderas|MST CDT CST|70 50 60|01212121212121212121212|1C1l0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3","America/Fortaleza|BRT|30|0||34e5","America/Managua|CST|60|0||22e5","America/Manaus|AMT|40|0||19e5","America/Bogota|COT|50|0||90e5","America/Denver|MST MDT|70 60|01010101010101010101010|1BQV0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5","America/Campo_Grande|AMST AMT|30 40|01010101010101010101010|1BIr0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10|77e4","America/Cancun|CST CDT EST|60 50 50|010101010102|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|VET|4u|0||29e5","America/Cayenne|GFT|30|0||58e3","America/Cayman|EST EDT|50 40|01010101010|1Qtj0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|58e3","America/Chicago|CST CDT|60 50|01010101010101010101010|1BQU0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5","America/Chihuahua|MST MDT|70 60|01010101010101010101010|1C1l0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4","America/Phoenix|MST|70|0||42e5","America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6","America/New_York|EST EDT|50 40|01010101010101010101010|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6","America/Rio_Branco|AMT ACT|40 50|01|1KLE0|31e4","America/Fort_Nelson|PST PDT MST|80 70 70|010101010102|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Halifax|AST ADT|40 30|01010101010101010101010|1BQS0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4","America/Godthab|WGT WGST|30 20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3","America/Goose_Bay|AST ADT|40 30|01010101010101010101010|1BQQ1 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2","America/Grand_Turk|EST EDT AST|50 40 40|0101010101012|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Guayaquil|ECT|50|0||27e5","America/Guyana|GYT|40|0||80e4","America/Havana|CST CDT|50 40|01010101010101010101010|1BQR0 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5","America/La_Paz|BOT|40|0||19e5","America/Lima|PET|50|0||11e6","America/Mexico_City|CST CDT|60 50|01010101010101010101010|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6","America/Metlakatla|PST|80|0||14e2","America/Miquelon|PMST PMDT|30 20|01010101010101010101010|1BQR0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2","America/Montevideo|UYST UYT|20 30|010101010101|1BQQ0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Noronha|FNT|20|0||30e2","America/North_Dakota/Beulah|MST MDT CST CDT|70 60 60 50|01232323232323232323232|1BQV0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Paramaribo|SRT|30|0||24e4","America/Port-au-Prince|EST EDT|50 40|0101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Santa_Isabel|PST PDT|80 70|01010101010101010101010|1C1m0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|23e3","America/Santiago|CLST CLT CLT|30 40 30|010101010102|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0|62e5","America/Sao_Paulo|BRST BRT|20 30|01010101010101010101010|1BIq0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10|20e6","America/Scoresbysund|EGT EGST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452","America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1BQPv 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","Antarctica/Casey|CAST AWST|-b0 -80|0101|1BN30 40P0 KL0|10","Antarctica/Davis|DAVT DAVT|-50 -70|0101|1BPw0 3Wn0 KN0|70","Antarctica/DumontDUrville|DDUT|-a0|0||80","Antarctica/Macquarie|AEDT MIST|-b0 -b0|01|1C140|1","Antarctica/Mawson|MAWT|-50|0||60","Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5","Antarctica/Rothera|ROTT|30|0||130","Antarctica/Syowa|SYOT|-30|0||20","Antarctica/Troll|UTC CEST|0 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40","Antarctica/Vostok|VOST|-60|0||25","Asia/Baghdad|AST|-30|0||66e5","Asia/Almaty|ALMT|-60|0||15e5","Asia/Amman|EET EEST|-20 -30|010101010101010101010|1BVy0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0|25e5","Asia/Anadyr|ANAT ANAST ANAT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0|13e3","Asia/Aqtobe|AQTT|-50|0||27e4","Asia/Ashgabat|TMT|-50|0||41e4","Asia/Baku|AZT AZST|-40 -50|01010101010101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|ICT|-70|0||15e6","Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1BWm0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5","Asia/Bishkek|KGT|-60|0||87e4","Asia/Brunei|BNT|-80|0||42e4","Asia/Kolkata|IST|-5u|0||15e6","Asia/Chita|YAKT YAKST YAKT IRKT|-90 -a0 -a0 -80|01023|1BWh0 1qM0 WM0 8Hz0|33e4","Asia/Choibalsan|CHOT CHOST|-80 -90|0101010101010|1O8G0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|38e3","Asia/Shanghai|CST|-80|0||23e6","Asia/Dhaka|BDT|-60|0||16e6","Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1C0m0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0|26e5","Asia/Dili|TLT|-90|0||19e4","Asia/Dubai|GST|-40|0||39e5","Asia/Dushanbe|TJT|-50|0||76e4","Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1BVW1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0|18e5","Asia/Hebron|EET EEST|-20 -30|0101010101010101010101010|1BVy0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0|25e4","Asia/Hong_Kong|HKT|-80|0||73e5","Asia/Hovd|HOVT HOVST|-70 -80|0101010101010|1O8H0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|IRKT IRKST IRKT|-80 -90 -90|01020|1BWi0 1qM0 WM0 8Hz0|60e4","Europe/Istanbul|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e6","Asia/Jakarta|WIB|-70|0||31e6","Asia/Jayapura|WIT|-90|0||26e4","Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1BVA0 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4","Asia/Kabul|AFT|-4u|0||46e5","Asia/Kamchatka|PETT PETST PETT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0|18e4","Asia/Karachi|PKT|-50|0||24e6","Asia/Urumqi|XJT|-60|0||32e5","Asia/Kathmandu|NPT|-5J|0||12e5","Asia/Khandyga|VLAT VLAST VLAT YAKT YAKT|-a0 -b0 -b0 -a0 -90|010234|1BWg0 1qM0 WM0 17V0 7zD0|66e2","Asia/Krasnoyarsk|KRAT KRAST KRAT|-70 -80 -80|01020|1BWj0 1qM0 WM0 8Hz0|10e5","Asia/Kuala_Lumpur|MYT|-80|0||71e5","Asia/Magadan|MAGT MAGST MAGT MAGT|-b0 -c0 -c0 -a0|01023|1BWf0 1qM0 WM0 8Hz0|95e3","Asia/Makassar|WITA|-80|0||15e5","Asia/Manila|PHT|-80|0||24e6","Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5","Asia/Novokuznetsk|KRAT NOVST NOVT NOVT|-70 -70 -60 -70|01230|1BWj0 1qN0 WM0 8Hz0|55e4","Asia/Novosibirsk|NOVT NOVST NOVT|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0|15e5","Asia/Omsk|OMST OMSST OMST|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0|12e5","Asia/Oral|ORAT|-50|0||27e4","Asia/Pyongyang|KST KST|-90 -8u|01|1P4D0|29e5","Asia/Qyzylorda|QYZT|-60|0||73e4","Asia/Rangoon|MMT|-6u|0||48e5","Asia/Sakhalin|SAKT SAKST SAKT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0|58e4","Asia/Tashkent|UZT|-50|0||23e5","Asia/Seoul|KST|-90|0||23e6","Asia/Singapore|SGT|-80|0||56e5","Asia/Srednekolymsk|MAGT MAGST MAGT SRET|-b0 -c0 -c0 -b0|01023|1BWf0 1qM0 WM0 8Hz0|35e2","Asia/Tbilisi|GET|-40|0||11e5","Asia/Tehran|IRST IRDT|-3u -4u|01010101010101010101010|1BTUu 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6","Asia/Thimphu|BTT|-60|0||79e3","Asia/Tokyo|JST|-90|0||38e6","Asia/Ulaanbaatar|ULAT ULAST|-80 -90|0101010101010|1O8G0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|12e5","Asia/Ust-Nera|MAGT MAGST MAGT VLAT VLAT|-b0 -c0 -c0 -b0 -a0|010234|1BWf0 1qM0 WM0 17V0 7zD0|65e2","Asia/Vladivostok|VLAT VLAST VLAT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0|60e4","Asia/Yakutsk|YAKT YAKST YAKT|-90 -a0 -a0|01020|1BWh0 1qM0 WM0 8Hz0|28e4","Asia/Yekaterinburg|YEKT YEKST YEKT|-50 -60 -60|01020|1BWl0 1qM0 WM0 8Hz0|14e5","Asia/Yerevan|AMT AMST|-40 -50|01010|1BWm0 1qM0 WM0 1qM0|13e5","Atlantic/Azores|AZOT AZOST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4","Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Atlantic/Cape_Verde|CVT|10|0||50e4","Atlantic/South_Georgia|GST|20|0||30","Atlantic/Stanley|FKST FKT|30 40|010|1C6R0 U10|21e2","Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1C140 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1C14u 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST|-a0|0||20e5","Australia/Darwin|ACST|-9u|0||12e4","Australia/Eucla|ACWST|-8J|0||368","Australia/Lord_Howe|LHDT LHST|-b0 -au|01010101010101010101010|1C130 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347","Australia/Perth|AWST|-80|0||18e5","Pacific/Easter|EASST EAST EAST|50 60 50|010101010102|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0|30e2","Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Etc/GMT+1|GMT+1|10|0|","Etc/GMT+10|GMT+10|a0|0|","Etc/GMT+11|GMT+11|b0|0|","Etc/GMT+12|GMT+12|c0|0|","Etc/GMT+2|GMT+2|20|0|","Etc/GMT+3|GMT+3|30|0|","Etc/GMT+4|GMT+4|40|0|","Etc/GMT+5|GMT+5|50|0|","Etc/GMT+6|GMT+6|60|0|","Etc/GMT+7|GMT+7|70|0|","Etc/GMT+8|GMT+8|80|0|","Etc/GMT+9|GMT+9|90|0|","Etc/GMT-1|GMT-1|-10|0|","Etc/GMT-10|GMT-10|-a0|0|","Etc/GMT-11|GMT-11|-b0|0|","Etc/GMT-12|GMT-12|-c0|0|","Etc/GMT-13|GMT-13|-d0|0|","Etc/GMT-14|GMT-14|-e0|0|","Etc/GMT-2|GMT-2|-20|0|","Etc/GMT-3|GMT-3|-30|0|","Etc/GMT-4|GMT-4|-40|0|","Etc/GMT-5|GMT-5|-50|0|","Etc/GMT-6|GMT-6|-60|0|","Etc/GMT-7|GMT-7|-70|0|","Etc/GMT-8|GMT-8|-80|0|","Etc/GMT-9|GMT-9|-90|0|","Etc/UCT|UCT|0|0|","Etc/UTC|UTC|0|0|","Europe/London|GMT BST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6","Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4","Europe/Kaliningrad|EET EEST FET|-20 -30 -30|01020|1BWo0 1qM0 WM0 8Hz0|44e4","Europe/Minsk|EET EEST FET MSK|-20 -30 -30 -30|01023|1BWo0 1qM0 WM0 8Hy0|19e5","Europe/Moscow|MSK MSD MSK|-30 -40 -40|01020|1BWn0 1qM0 WM0 8Hz0|16e6","Europe/Samara|SAMT SAMST SAMT|-40 -40 -30|0120|1BWm0 1qN0 WM0|12e5","Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|01010101023|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4","Pacific/Honolulu|HST|a0|0||37e4","Indian/Chagos|IOT|-60|0||30e2","Indian/Christmas|CXT|-70|0||21e2","Indian/Cocos|CCT|-6u|0||596","Indian/Kerguelen|TFT|-50|0||130","Indian/Mahe|SCT|-40|0||79e3","Indian/Maldives|MVT|-50|0||35e4","Indian/Mauritius|MUT|-40|0||15e4","Indian/Reunion|RET|-40|0||84e4","Pacific/Majuro|MHT|-c0|0||28e3","MET|MET MEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Pacific/Chatham|CHADT CHAST|-dJ -cJ|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|SST SDT WSDT WSST|b0 a0 -e0 -d0|01012323232323232323232|1Dbn0 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3","Pacific/Bougainville|PGT BST|-a0 -b0|01|1NwE0|18e4","Pacific/Chuuk|CHUT|-a0|0||49e3","Pacific/Efate|VUT|-b0|0||66e3","Pacific/Enderbury|PHOT|-d0|0||1","Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0|483","Pacific/Fiji|FJST FJT|-d0 -c0|01010101010101010101010|1BWe0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0|88e4","Pacific/Funafuti|TVT|-c0|0||45e2","Pacific/Galapagos|GALT|60|0||25e3","Pacific/Gambier|GAMT|90|0||125","Pacific/Guadalcanal|SBT|-b0|0||11e4","Pacific/Guam|ChST|-a0|0||17e4","Pacific/Kiritimati|LINT|-e0|0||51e2","Pacific/Kosrae|KOST|-b0|0||66e2","Pacific/Marquesas|MART|9u|0||86e2","Pacific/Pago_Pago|SST|b0|0||37e2","Pacific/Nauru|NRT|-c0|0||10e3","Pacific/Niue|NUT|b0|0||12e2","Pacific/Norfolk|NFT NFT|-bu -b0|01|1PoCu|25e4","Pacific/Noumea|NCT|-b0|0||98e3","Pacific/Palau|PWT|-90|0||21e3","Pacific/Pohnpei|PONT|-b0|0||34e3","Pacific/Port_Moresby|PGT|-a0|0||25e4","Pacific/Rarotonga|CKT|a0|0||13e3","Pacific/Tahiti|TAHT|a0|0||18e4","Pacific/Tarawa|GILT|-c0|0||29e3","Pacific/Tongatapu|TOT|-d0|0||75e3","Pacific/Wake|WAKT|-c0|0||16e3","Pacific/Wallis|WFT|-c0|0||94"],links:["Africa/Abidjan|Africa/Accra","Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Bissau","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Monrovia","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Sao_Tome","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|America/Danmarkshavn","Africa/Abidjan|Atlantic/Reykjavik","Africa/Abidjan|Atlantic/St_Helena","Africa/Abidjan|Etc/GMT","Africa/Abidjan|Etc/GMT+0","Africa/Abidjan|Etc/GMT-0","Africa/Abidjan|Etc/GMT0","Africa/Abidjan|Etc/Greenwich","Africa/Abidjan|GMT","Africa/Abidjan|GMT+0","Africa/Abidjan|GMT-0","Africa/Abidjan|GMT0","Africa/Abidjan|Greenwich","Africa/Abidjan|Iceland","Africa/Algiers|Africa/Tunis","Africa/Cairo|Egypt","Africa/Casablanca|Africa/El_Aaiun","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Khartoum|Africa/Addis_Ababa","Africa/Khartoum|Africa/Asmara","Africa/Khartoum|Africa/Asmera","Africa/Khartoum|Africa/Dar_es_Salaam","Africa/Khartoum|Africa/Djibouti","Africa/Khartoum|Africa/Juba","Africa/Khartoum|Africa/Kampala","Africa/Khartoum|Africa/Mogadishu","Africa/Khartoum|Africa/Nairobi","Africa/Khartoum|Indian/Antananarivo","Africa/Khartoum|Indian/Comoro","Africa/Khartoum|Indian/Mayotte","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Ndjamena","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|America/Juneau","America/Anchorage|America/Nome","America/Anchorage|America/Sitka","America/Anchorage|America/Yakutat","America/Anchorage|US/Alaska","America/Argentina/Buenos_Aires|America/Argentina/Catamarca","America/Argentina/Buenos_Aires|America/Argentina/ComodRivadavia","America/Argentina/Buenos_Aires|America/Argentina/Cordoba","America/Argentina/Buenos_Aires|America/Argentina/Jujuy","America/Argentina/Buenos_Aires|America/Argentina/La_Rioja","America/Argentina/Buenos_Aires|America/Argentina/Mendoza","America/Argentina/Buenos_Aires|America/Argentina/Rio_Gallegos","America/Argentina/Buenos_Aires|America/Argentina/Salta","America/Argentina/Buenos_Aires|America/Argentina/San_Juan","America/Argentina/Buenos_Aires|America/Argentina/San_Luis","America/Argentina/Buenos_Aires|America/Argentina/Tucuman","America/Argentina/Buenos_Aires|America/Argentina/Ushuaia","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Buenos_Aires|America/Catamarca","America/Argentina/Buenos_Aires|America/Cordoba","America/Argentina/Buenos_Aires|America/Jujuy","America/Argentina/Buenos_Aires|America/Mendoza","America/Argentina/Buenos_Aires|America/Rosario","America/Campo_Grande|America/Cuiaba","America/Chicago|America/Indiana/Knox","America/Chicago|America/Indiana/Tell_City","America/Chicago|America/Knox_IN","America/Chicago|America/Matamoros","America/Chicago|America/Menominee","America/Chicago|America/North_Dakota/Center","America/Chicago|America/North_Dakota/New_Salem","America/Chicago|America/Rainy_River","America/Chicago|America/Rankin_Inlet","America/Chicago|America/Resolute","America/Chicago|America/Winnipeg","America/Chicago|CST6CDT","America/Chicago|Canada/Central","America/Chicago|US/Central","America/Chicago|US/Indiana-Starke","America/Chihuahua|America/Mazatlan","America/Chihuahua|Mexico/BajaSur","America/Denver|America/Boise","America/Denver|America/Cambridge_Bay","America/Denver|America/Edmonton","America/Denver|America/Inuvik","America/Denver|America/Ojinaga","America/Denver|America/Shiprock","America/Denver|America/Yellowknife","America/Denver|Canada/Mountain","America/Denver|MST7MDT","America/Denver|Navajo","America/Denver|US/Mountain","America/Fortaleza|America/Belem","America/Fortaleza|America/Maceio","America/Fortaleza|America/Recife","America/Fortaleza|America/Santarem","America/Halifax|America/Glace_Bay","America/Halifax|America/Moncton","America/Halifax|America/Thule","America/Halifax|Atlantic/Bermuda","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Los_Angeles|America/Dawson","America/Los_Angeles|America/Ensenada","America/Los_Angeles|America/Tijuana","America/Los_Angeles|America/Vancouver","America/Los_Angeles|America/Whitehorse","America/Los_Angeles|Canada/Pacific","America/Los_Angeles|Canada/Yukon","America/Los_Angeles|Mexico/BajaNorte","America/Los_Angeles|PST8PDT","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Managua|America/Belize","America/Managua|America/Costa_Rica","America/Managua|America/El_Salvador","America/Managua|America/Guatemala","America/Managua|America/Regina","America/Managua|America/Swift_Current","America/Managua|America/Tegucigalpa","America/Managua|Canada/East-Saskatchewan","America/Managua|Canada/Saskatchewan","America/Manaus|America/Boa_Vista","America/Manaus|America/Porto_Velho","America/Manaus|Brazil/West","America/Metlakatla|Pacific/Pitcairn","America/Mexico_City|America/Merida","America/Mexico_City|America/Monterrey","America/Mexico_City|Mexico/General","America/New_York|America/Detroit","America/New_York|America/Fort_Wayne","America/New_York|America/Indiana/Indianapolis","America/New_York|America/Indiana/Marengo","America/New_York|America/Indiana/Petersburg","America/New_York|America/Indiana/Vevay","America/New_York|America/Indiana/Vincennes","America/New_York|America/Indiana/Winamac","America/New_York|America/Indianapolis","America/New_York|America/Iqaluit","America/New_York|America/Kentucky/Louisville","America/New_York|America/Kentucky/Monticello","America/New_York|America/Louisville","America/New_York|America/Montreal","America/New_York|America/Nassau","America/New_York|America/Nipigon","America/New_York|America/Pangnirtung","America/New_York|America/Thunder_Bay","America/New_York|America/Toronto","America/New_York|Canada/Eastern","America/New_York|EST5EDT","America/New_York|US/East-Indiana","America/New_York|US/Eastern","America/New_York|US/Michigan","America/Noronha|Brazil/DeNoronha","America/Panama|America/Atikokan","America/Panama|America/Coral_Harbour","America/Panama|America/Jamaica","America/Panama|EST","America/Panama|Jamaica","America/Phoenix|America/Creston","America/Phoenix|America/Dawson_Creek","America/Phoenix|America/Hermosillo","America/Phoenix|MST","America/Phoenix|US/Arizona","America/Rio_Branco|America/Eirunepe","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Antarctica/Palmer","America/Santiago|Chile/Continental","America/Santo_Domingo|America/Anguilla","America/Santo_Domingo|America/Antigua","America/Santo_Domingo|America/Aruba","America/Santo_Domingo|America/Barbados","America/Santo_Domingo|America/Blanc-Sablon","America/Santo_Domingo|America/Curacao","America/Santo_Domingo|America/Dominica","America/Santo_Domingo|America/Grenada","America/Santo_Domingo|America/Guadeloupe","America/Santo_Domingo|America/Kralendijk","America/Santo_Domingo|America/Lower_Princes","America/Santo_Domingo|America/Marigot","America/Santo_Domingo|America/Martinique","America/Santo_Domingo|America/Montserrat","America/Santo_Domingo|America/Port_of_Spain","America/Santo_Domingo|America/Puerto_Rico","America/Santo_Domingo|America/St_Barthelemy","America/Santo_Domingo|America/St_Kitts","America/Santo_Domingo|America/St_Lucia","America/Santo_Domingo|America/St_Thomas","America/Santo_Domingo|America/St_Vincent","America/Santo_Domingo|America/Tortola","America/Santo_Domingo|America/Virgin","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","Asia/Aqtobe|Asia/Aqtau","Asia/Ashgabat|Asia/Ashkhabad","Asia/Baghdad|Asia/Aden","Asia/Baghdad|Asia/Bahrain","Asia/Baghdad|Asia/Kuwait","Asia/Baghdad|Asia/Qatar","Asia/Baghdad|Asia/Riyadh","Asia/Bangkok|Asia/Ho_Chi_Minh","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Saigon","Asia/Bangkok|Asia/Vientiane","Asia/Dhaka|Asia/Dacca","Asia/Dubai|Asia/Muscat","Asia/Hong_Kong|Hongkong","Asia/Jakarta|Asia/Pontianak","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Kolkata|Asia/Colombo","Asia/Kuala_Lumpur|Asia/Kuching","Asia/Makassar|Asia/Ujung_Pandang","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|Asia/Macao","Asia/Shanghai|Asia/Macau","Asia/Shanghai|Asia/Taipei","Asia/Shanghai|PRC","Asia/Shanghai|ROC","Asia/Singapore|Singapore","Asia/Tashkent|Asia/Samarkand","Asia/Tehran|Iran","Asia/Thimphu|Asia/Thimbu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Urumqi|Asia/Kashgar","Australia/Adelaide|Australia/Broken_Hill","Australia/Adelaide|Australia/South","Australia/Adelaide|Australia/Yancowinna","Australia/Brisbane|Australia/Lindeman","Australia/Brisbane|Australia/Queensland","Australia/Darwin|Australia/North","Australia/Lord_Howe|Australia/LHI","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/Currie","Australia/Sydney|Australia/Hobart","Australia/Sydney|Australia/Melbourne","Australia/Sydney|Australia/NSW","Australia/Sydney|Australia/Tasmania","Australia/Sydney|Australia/Victoria","Etc/UCT|UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Athens|Asia/Nicosia","Europe/Athens|EET","Europe/Athens|Europe/Bucharest","Europe/Athens|Europe/Helsinki","Europe/Athens|Europe/Kiev","Europe/Athens|Europe/Mariehamn","Europe/Athens|Europe/Nicosia","Europe/Athens|Europe/Riga","Europe/Athens|Europe/Sofia","Europe/Athens|Europe/Tallinn","Europe/Athens|Europe/Uzhgorod","Europe/Athens|Europe/Vilnius","Europe/Athens|Europe/Zaporozhye","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Atlantic/Canary","Europe/Lisbon|Atlantic/Faeroe","Europe/Lisbon|Atlantic/Faroe","Europe/Lisbon|Atlantic/Madeira","Europe/Lisbon|Portugal","Europe/Lisbon|WET","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|Europe/Volgograd","Europe/Moscow|W-SU","Europe/Paris|Africa/Ceuta","Europe/Paris|Arctic/Longyearbyen","Europe/Paris|Atlantic/Jan_Mayen","Europe/Paris|CET","Europe/Paris|Europe/Amsterdam","Europe/Paris|Europe/Andorra","Europe/Paris|Europe/Belgrade","Europe/Paris|Europe/Berlin","Europe/Paris|Europe/Bratislava","Europe/Paris|Europe/Brussels","Europe/Paris|Europe/Budapest","Europe/Paris|Europe/Busingen","Europe/Paris|Europe/Copenhagen","Europe/Paris|Europe/Gibraltar","Europe/Paris|Europe/Ljubljana","Europe/Paris|Europe/Luxembourg","Europe/Paris|Europe/Madrid","Europe/Paris|Europe/Malta","Europe/Paris|Europe/Monaco","Europe/Paris|Europe/Oslo","Europe/Paris|Europe/Podgorica","Europe/Paris|Europe/Prague","Europe/Paris|Europe/Rome","Europe/Paris|Europe/San_Marino","Europe/Paris|Europe/Sarajevo","Europe/Paris|Europe/Skopje","Europe/Paris|Europe/Stockholm","Europe/Paris|Europe/Tirane","Europe/Paris|Europe/Vaduz","Europe/Paris|Europe/Vatican","Europe/Paris|Europe/Vienna","Europe/Paris|Europe/Warsaw","Europe/Paris|Europe/Zagreb","Europe/Paris|Europe/Zurich","Europe/Paris|Poland","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Easter|Chile/EasterIsland","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|HST","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Majuro|Kwajalein","Pacific/Majuro|Pacific/Kwajalein","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Pohnpei|Pacific/Ponape"]}),e}),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={},RiseVision=RiseVision||{};RiseVision.TimeDate={},RiseVision.TimeDate=function(e){"use strict";function t(){var e=[{"class":"time-and-date",fontStyle:m.fontStyle}];RiseVision.Common.Utilities.loadFonts(e),h=m.showTime?m.timeFormat:"",h+=m.showTime&&m.showDate?" ":"",h+=m.showDate?m.dateFormat:"",f=document.createElement("p"),f.className="time-and-date",f.style.textAlign=m.fontStyle.align,document.getElementById("container").appendChild(f),n()
}function n(){e.rpc.call("","rsevent_ready",null,d.getString("id"),!0,!0,!0,!0,!1)}function i(e){m=JSON.parse(JSON.stringify(e)),m.width=d.getInt("rsW"),m.height=d.getInt("rsH"),document.getElementById("container").style.width=m.width+"px",document.getElementById("container").style.height=m.height+"px",A=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),t()}function a(){if(h){var e=moment();m.useTimezone&&(e=moment().tz(m.timezone)),f.innerHTML=e.format(h),l=setTimeout(function(){a()},1e3)}}function r(){clearTimeout(l)}function o(){p||(u({event:"configuration",event_details:JSON.stringify(m)}),p=!0),a(),u({event:"play",event_details:h})}function s(){r()}function c(){return"time_date_events"}function u(e){RiseVision.Common.LoggerUtils.logEvent(c(),e)}var l,f,h,d=new e.Prefs,m=null,A=null,p=!1;return{pause:r,play:o,setAdditionalParams:i,stop:s,logEvent:u,getTableName:c}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.display="block",r=!1}}function a(n){var i,a=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.display="none",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),a.appendChild(i),t.appendChild(a),r=!0)}var r=!1;return n(),{hide:i,show:a}},function(e,t,n){"use strict";function i(e,t){var n,i="",a="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(i=t[0]),"displayId"===e[1]&&(a=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,a),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),RiseVision.TimeDate.setAdditionalParams(n)))}function a(){RiseVision.TimeDate.pause()}function r(){RiseVision.TimeDate.play()}function o(){RiseVision.TimeDate.stop()}var s=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},s&&""!==s&&(n.rpc.register("rscmd_play_"+s,r),n.rpc.register("rscmd_pause_"+s,a),n.rpc.register("rscmd_stop_"+s,o),n.rpc.register("rsparam_set_"+s,i),n.rpc.call("","rsparam_get",null,s,["companyId","displayId","additionalParams"]))}(window,document,gadgets);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
